agent/src/beerocks/monitor/monitor_db.h:26:5: warning: Member variable 'monitor_sta_node::m_sta_stats' is not initialized in the constructor. [uninitMemberVar]
    monitor_sta_node(const int8_t vap_id_, const std::string mac_) { vap_id = vap_id_, mac = mac_; }
    ^
agent/src/beerocks/monitor/monitor_db.h:148:5: warning: Member variable 'monitor_vap_node::m_vap_stats' is not initialized in the constructor. [uninitMemberVar]
    monitor_vap_node(const std::string iface_, const int8_t vap_id_)
    ^
agent/src/beerocks/monitor/monitor_db.h:225:5: warning: Member variable 'monitor_radio_node::m_radio_stats' is not initialized in the constructor. [uninitMemberVar]
    monitor_radio_node() {}
    ^
agent/src/beerocks/monitor/monitor_db.h:26:88: performance: Variable 'mac' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    monitor_sta_node(const int8_t vap_id_, const std::string mac_) { vap_id = vap_id_, mac = mac_; }
                                                                                       ^
agent/src/beerocks/monitor/monitor_db.h:150:9: performance: Variable 'iface' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
        iface  = iface_;
        ^
common/beerocks/bcl/include/bcl/network/socket.h:131:9: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
        m_error.clear();
        ^
agent/src/beerocks/monitor/monitor_db.h:26:62: performance: Function parameter 'mac_' should be passed by const reference. [passedByValue]
    monitor_sta_node(const int8_t vap_id_, const std::string mac_) { vap_id = vap_id_, mac = mac_; }
                                                             ^
agent/src/beerocks/monitor/monitor_db.h:41:31: performance: Function parameter 'ip' should be passed by const reference. [passedByValue]
    void set_ipv4(std::string ip) { ipv4 = ip; }
                              ^
agent/src/beerocks/monitor/monitor_db.h:44:49: performance: Function parameter 'bridge_mac_4addr_' should be passed by const reference. [passedByValue]
    void set_bridge_4addr_mac(const std::string bridge_mac_4addr_)
                                                ^
agent/src/beerocks/monitor/monitor_db.h:148:40: performance: Function parameter 'iface_' should be passed by const reference. [passedByValue]
    monitor_vap_node(const std::string iface_, const int8_t vap_id_)
                                       ^
agent/src/beerocks/monitor/monitor_db.h:160:36: performance: Function parameter 'ap_mac_' should be passed by const reference. [passedByValue]
    void set_mac(const std::string ap_mac_) { mac = ap_mac_; }
                                   ^
agent/src/beerocks/monitor/monitor_db.h:165:45: performance: Function parameter 'bridge_iface_' should be passed by const reference. [passedByValue]
    void set_bridge_iface(const std::string bridge_iface_) { bridge_iface = bridge_iface_; }
                                            ^
agent/src/beerocks/monitor/monitor_db.h:168:43: performance: Function parameter 'bridge_mac_' should be passed by const reference. [passedByValue]
    void set_bridge_mac(const std::string bridge_mac_) { bridge_mac = bridge_mac_; }
                                          ^
agent/src/beerocks/monitor/monitor_db.h:171:44: performance: Function parameter 'bridge_ipv4_' should be passed by const reference. [passedByValue]
    void set_bridge_ipv4(const std::string bridge_ipv4_) { bridge_ipv4 = bridge_ipv4_; }
                                           ^
agent/src/beerocks/monitor/monitor_db.h:228:38: performance: Function parameter 'iface_' should be passed by const reference. [passedByValue]
    void set_iface(const std::string iface_) { iface = iface_; }
                                     ^
common/beerocks/bcl/include/bcl/network/socket.h:71:33: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
    void setPeerMac(std::string mac) { m_peer_mac = mac; }
                                ^
agent/src/beerocks/monitor/monitor_db.cpp:251:73: performance: Function parameter 'iface' should be passed by const reference. [passedByValue]
std::shared_ptr<monitor_vap_node> monitor_db::vap_add(const std::string iface, int8_t vap_id)
                                                                        ^
agent/src/beerocks/monitor/monitor_db.cpp:301:58: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
monitor_sta_node *monitor_db::sta_find(const std::string sta_mac)
                                                         ^
agent/src/beerocks/monitor/monitor_db.cpp:310:66: performance: Function parameter 'ipv4' should be passed by const reference. [passedByValue]
monitor_sta_node *monitor_db::sta_find_by_ipv4(const std::string ipv4)
                                                                 ^
agent/src/beerocks/monitor/monitor_db.cpp:320:57: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
monitor_sta_node *monitor_db::sta_add(const std::string sta_mac, const int8_t vap_id)
                                                        ^
agent/src/beerocks/monitor/monitor_db.cpp:331:46: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
void monitor_db::sta_erase(const std::string sta_mac)
                                             ^
agent/src/beerocks/monitor/monitor_db.cpp:398:11: style: Variable 'sta_stats' can be declared with const [constVariable]
    auto &sta_stats = get_stats();
          ^
agent/src/beerocks/monitor/monitor_db.cpp:404:11: style: Variable 'sta_stats' can be declared with const [constVariable]
    auto &sta_stats = get_stats();
          ^
agent/src/beerocks/monitor/monitor_db.h:292:65: performance: Function parameter 'iface' should be passed by const reference. [passedByValue]
    std::shared_ptr<monitor_vap_node> vap_add(const std::string iface, int8_t vap_id);
                                                                ^
agent/src/beerocks/monitor/monitor_db.h:301:49: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
    monitor_sta_node *sta_add(const std::string sta_mac, const int8_t vap_id);
                                                ^
agent/src/beerocks/monitor/monitor_db.h:302:38: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
    void sta_erase(const std::string sta_mac);
                                     ^
agent/src/beerocks/monitor/monitor_db.h:304:50: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
    monitor_sta_node *sta_find(const std::string mac);
                                                 ^
agent/src/beerocks/monitor/monitor_db.h:305:58: performance: Function parameter 'ipv4' should be passed by const reference. [passedByValue]
    monitor_sta_node *sta_find_by_ipv4(const std::string ipv4);
                                                         ^
common/beerocks/bcl/include/bcl/beerocks_logging.h:76:31: performance: Function parameter 'config_path' should be passed by const reference. [passedByValue]
    logging(const std::string config_path = std::string(),
                              ^
common/beerocks/bwl/include/bwl/mon_wlan_hal.h:50:53: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
    virtual bool update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats) = 0;
                                                    ^
common/beerocks/bwl/include/bwl/mon_wlan_hal.h:51:58: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
    virtual bool update_stations_stats(const std::string vap_iface_name, const std::string sta_mac,
                                                         ^
common/beerocks/bwl/include/bwl/mon_wlan_hal.h:51:92: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
    virtual bool update_stations_stats(const std::string vap_iface_name, const std::string sta_mac,
                                                                                           ^
agent/src/beerocks/monitor/monitor_rssi.cpp:316:18: style: Local variable 'sta_vap_id' shadows outer variable [shadowVariable]
            auto sta_vap_id = sta_node->get_vap_id();
                 ^
agent/src/beerocks/slave/agent_ucc_listener.cpp:90:10: style: struct member 'sVapElement::backhaul_vap' is never used. [unusedStructMember]
    bool backhaul_vap;
         ^
agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.cpp:384:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.cpp:388:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.cpp:392:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.cpp:406:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.cpp:410:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
agent/src/beerocks/monitor/rdkb/monitor_rdkb_hal.cpp:414:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
agent/src/beerocks/monitor/monitor_thread.cpp:541:13: style: The if condition is the same as the previous if condition [duplicateCondition]
        if (poll_last) {
            ^
agent/src/beerocks/monitor/monitor_thread.cpp:557:13: style: The if condition is the same as the previous if condition [duplicateCondition]
        if (poll_last) {
            ^
agent/src/beerocks/monitor/monitor_thread.cpp:627:14: style: Local variable 'time_span' shadows outer variable [shadowVariable]
        auto time_span =
             ^
agent/src/beerocks/monitor/monitor_thread.cpp:67:27: style: Variable 'iface' is assigned a value that is never used. [unreadVariable]
        std::string iface = radio_node->get_iface();
                          ^
agent/src/beerocks/monitor/monitor_thread.cpp:1365:23: style: Variable 'id' is assigned a value that is never used. [unreadVariable]
        int id        = 0;
                      ^
agent/src/beerocks/slave/backhaul_manager/wan_monitor.cpp:62:14: warning: Member variable 'wan_monitor::m_arrNLBuff' is not initialized in the constructor. [uninitMemberVar]
wan_monitor::wan_monitor() : m_iNetlinkFD(-1) {}
             ^
agent/src/beerocks/slave/backhaul_manager/wan_monitor.cpp:70:61: performance: Function parameter 'strWanIfaceName' should be passed by const reference. [passedByValue]
wan_monitor::ELinkState wan_monitor::initialize(std::string strWanIfaceName)
                                                            ^
agent/src/beerocks/slave/ap_manager_thread.cpp:152:20: warning: Member variable 'ap_manager_thread::wifi_channel' is not initialized in the constructor. [uninitMemberVar]
ap_manager_thread::ap_manager_thread(std::string slave_uds_)
                   ^
agent/src/beerocks/slave/ap_manager_thread.cpp:152:20: warning: Member variable 'ap_manager_thread::acs_enabled' is not initialized in the constructor. [uninitMemberVar]
ap_manager_thread::ap_manager_thread(std::string slave_uds_)
                   ^
agent/src/beerocks/slave/ap_manager_thread.cpp:152:20: warning: Member variable 'ap_manager_thread::low_filter' is not initialized in the constructor. [uninitMemberVar]
ap_manager_thread::ap_manager_thread(std::string slave_uds_)
                   ^
agent/src/beerocks/slave/ap_manager_thread.cpp:157:5: performance: Variable 'slave_uds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    slave_uds   = slave_uds_;
    ^
agent/src/beerocks/slave/ap_manager_thread.cpp:152:50: performance: Function parameter 'slave_uds_' should be passed by const reference. [passedByValue]
ap_manager_thread::ap_manager_thread(std::string slave_uds_)
                                                 ^
agent/src/beerocks/slave/ap_manager_thread.cpp:267:63: style: Parameter 'pending_vap' can be declared with const [constParameter]
    pending_disable_vaps.remove_if([&](pending_disable_vap_t &pending_vap) {
                                                              ^
agent/src/beerocks/slave/ap_manager_thread.cpp:247:21: style: Redundant checking of STL container element existence before removing it. [redundantIfRemove]
                if (connected_ires.find(mac) != connected_ires.end()) {
                    ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:283:19: warning: Member variable 'backhaul_manager::state_attempts' is not initialized in the constructor. [uninitMemberVar]
backhaul_manager::backhaul_manager(const config_file::sConfigSlave &config,
                  ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:283:19: warning: Member variable 'backhaul_manager::selected_bssid_channel' is not initialized in the constructor. [uninitMemberVar]
backhaul_manager::backhaul_manager(const config_file::sConfigSlave &config,
                  ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:283:19: warning: Member variable 'backhaul_manager::roam_selected_bssid_channel' is not initialized in the constructor. [uninitMemberVar]
backhaul_manager::backhaul_manager(const config_file::sConfigSlave &config,
                  ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:292:5: performance: Variable 'pending_slave_ifaces' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    pending_slave_ifaces                   = slave_ap_ifaces_;
    ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.h:58:18: warning: Virtual function 'on_thread_stop' is called from destructor '~backhaul_manager()' at line 305. Dynamic binding is not used. [virtualCallInConstructor]
    virtual void on_thread_stop() override;
                 ^
agent/src/beerocks/slave/beerocks_slave_main.cpp:142:72: style: Parameter 'beerocks_slave_conf' can be declared with const [constParameter]
static void fill_son_slave_config(beerocks::config_file::sConfigSlave &beerocks_slave_conf,
                                                                       ^
agent/src/beerocks/slave/beerocks_slave_main.cpp:209:66: style: Parameter 'beerocks_slave_conf' can be declared with const [constParameter]
static int system_hang_test(beerocks::config_file::sConfigSlave &beerocks_slave_conf, int argc,
                                                                 ^
agent/src/beerocks/slave/beerocks_slave_main.cpp:213:19: style: Unused variable: versionfile [unusedVariable]
    std::ofstream versionfile;
                  ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:2314:21: style: Local variable 'local_interface_name' shadows outer variable [shadowVariable]
        std::string local_interface_name = soc->hostap_iface;
                    ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:2398:14: style: Local variable 'supportedServiceTuple' shadows outer variable [shadowVariable]
        auto supportedServiceTuple = tlvSupportedService->supported_service_list(1);
             ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:2932:34: style: Local variable 'iface_hal' shadows outer variable [shadowVariable]
                            auto iface_hal = get_wireless_hal(sta_iface);
                                 ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:727:69: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
                    if (soc->hostap_iface == config_const_bh_slave) {
                                                                    ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:1653:44: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
                if (soc_iter->slave == sd) {
                                           ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:2101:87: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
            if (vap.second.find(client_info_tlv_r->client_mac()) != vap.second.end()) {
                                                                                      ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:2673:68: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                                      link_metrics_type, cmdu_tx)) {
                                                                   ^
agent/src/beerocks/slave/link_metrics/ieee802_3_link_metrics_collector.cpp:184:30: style: The scope of the variable 'msg_ptr' can be reduced. [variableScope]
            struct nlmsghdr *msg_ptr; /* pointer to current message part */
                             ^
agent/src/beerocks/slave/backhaul_manager/backhaul_manager_thread.cpp:1159:24: style: Variable 'p_cmdu_header' is assigned a value that is never used. [unreadVariable]
    auto p_cmdu_header =
                       ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:567:30: warning: Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]
    if (bpl::dhcp_mon_stop() == false) {
                             ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:292:14: warning: Member variable 'main_thread::m_uiArpMonIP' is not initialized in the constructor. [uninitMemberVar]
main_thread::main_thread(config_file::sConfigSlave config_,
             ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:292:14: warning: Member variable 'main_thread::m_uiArpMonMask' is not initialized in the constructor. [uninitMemberVar]
main_thread::main_thread(config_file::sConfigSlave config_,
             ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:292:14: warning: Member variable 'main_thread::is_onboarding_on_init' is not initialized in the constructor. [uninitMemberVar]
main_thread::main_thread(config_file::sConfigSlave config_,
             ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:292:14: warning: Member variable 'main_thread::platform_common_conf' is not initialized in the constructor. [uninitMemberVar]
main_thread::main_thread(config_file::sConfigSlave config_,
             ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:766:32: warning: Redundant assignment of '*(volatile char*)pass' to itself. [selfAssignment]
        *(volatile char *)pass = *(volatile char *)pass;
                               ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:948:36: warning: Redundant assignment of '*(volatile char*)pass' to itself. [selfAssignment]
            *(volatile char *)pass = *(volatile char *)pass;
                                   ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:246:41: performance: Function parameter 'parameter' should be passed by const reference. [passedByValue]
std::string extern_query_db(std::string parameter)
                                        ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:292:52: performance: Function parameter 'config_' should be passed by const reference. [passedByValue]
main_thread::main_thread(config_file::sConfigSlave config_,
                                                   ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:420:54: performance: Function parameter 'op' should be passed by const reference. [passedByValue]
void main_thread::send_dhcp_notification(std::string op, std::string mac, std::string ip,
                                                     ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:1468:59: performance: Function parameter 'op' should be passed by const reference. [passedByValue]
    static auto dhcp_monitor_cb_wrapper = [&](std::string op, std::string mac, std::string ip,
                                                          ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:1468:75: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
    static auto dhcp_monitor_cb_wrapper = [&](std::string op, std::string mac, std::string ip,
                                                                          ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:1468:92: performance: Function parameter 'ip' should be passed by const reference. [passedByValue]
    static auto dhcp_monitor_cb_wrapper = [&](std::string op, std::string mac, std::string ip,
                                                                                           ^
agent/src/beerocks/slave/platform_manager/platform_manager_thread.cpp:1469:59: performance: Function parameter 'hostname' should be passed by const reference. [passedByValue]
                                              std::string hostname) {
                                                          ^
common/beerocks/bcl/source/beerocks_config_file.cpp:43:55: performance: Function parameter 'config_file_path' should be passed by const reference. [passedByValue]
bool config_file::read_master_config_file(std::string config_file_path, sConfigMaster &conf)
                                                      ^
common/beerocks/bcl/source/beerocks_config_file.cpp:143:54: performance: Function parameter 'config_file_path' should be passed by const reference. [passedByValue]
bool config_file::read_slave_config_file(std::string config_file_path, sConfigSlave &conf)
                                                     ^
common/beerocks/bcl/source/beerocks_os_utils.cpp:51:10: style: The scope of the variable 'buffer' can be reduced. [variableScope]
    char buffer[512];
         ^
common/beerocks/bcl/source/beerocks_os_utils.cpp:115:9: style: The scope of the variable 'pid' can be reduced. [variableScope]
    int pid;
        ^
common/beerocks/bcl/source/beerocks_os_utils.cpp:127:18: style: The scope of the variable 'buffer' can be reduced. [variableScope]
            char buffer[1024]          = {0};
                 ^
common/beerocks/bcl/source/beerocks_os_utils.cpp:92:37: performance: Function parameter 'path' should be passed by const reference. [passedByValue]
void os_utils::kill_pid(std::string path, std::string file_name)
                                    ^
common/beerocks/bcl/source/beerocks_os_utils.cpp:92:55: performance: Function parameter 'file_name' should be passed by const reference. [passedByValue]
void os_utils::kill_pid(std::string path, std::string file_name)
                                                      ^
common/beerocks/bcl/source/beerocks_os_utils.cpp:110:43: performance: Function parameter 'path' should be passed by const reference. [passedByValue]
bool os_utils::is_pid_running(std::string path, std::string file_name, int *pid_out)
                                          ^
common/beerocks/bcl/source/beerocks_os_utils.cpp:155:43: performance: Function parameter 'path' should be passed by const reference. [passedByValue]
bool os_utils::write_pid_file(std::string path, std::string file_name)
                                          ^
common/beerocks/bcl/source/beerocks_os_utils.cpp:155:61: performance: Function parameter 'file_name' should be passed by const reference. [passedByValue]
bool os_utils::write_pid_file(std::string path, std::string file_name)
                                                            ^
common/beerocks/bcl/source/beerocks_logging.cpp:99:1: style: The class 'NetLogger' does not have a constructor although it has private member variables. [noConstructor]
class NetLogger : public el::LogDispatchCallback {
^
common/beerocks/bcl/source/beerocks_string_utils.cpp:19:56: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]
void string_utils::ltrim(std::string &str, std::string additional_chars)
                                                       ^
common/beerocks/bcl/source/beerocks_string_utils.cpp:24:56: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]
void string_utils::rtrim(std::string &str, std::string additional_chars)
                                                       ^
common/beerocks/bcl/source/beerocks_string_utils.cpp:29:55: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]
void string_utils::trim(std::string &str, std::string additional_chars)
                                                      ^
common/beerocks/bcl/source/beerocks_logging.cpp:101:71: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]
    void enable(const std::string &server, uint16_t port, std::string module_name)
                                                                      ^
common/beerocks/bcl/source/beerocks_logging.cpp:290:36: performance: Function parameter 'config_path' should be passed by const reference. [passedByValue]
logging::logging(const std::string config_path, std::string module_name)
                                   ^
common/beerocks/bcl/source/beerocks_logging.cpp:290:61: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]
logging::logging(const std::string config_path, std::string module_name)
                                                            ^
common/beerocks/bcl/source/beerocks_logging.cpp:328:81: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]
logging::logging(const beerocks::config_file::SConfigLog &settings, std::string module_name,
                                                                                ^
common/beerocks/bcl/source/beerocks_string_utils.cpp:117:17: style: Unused variable: return_string [unusedVariable]
    std::string return_string;
                ^
common/beerocks/bcl/source/beerocks_logging.cpp:262:13: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
        str += elt + ", ";
            ^
common/beerocks/bcl/source/beerocks_ucc_listener.cpp:534:11: style: Variable 'command_type_str' can be declared with const [constVariable]
    auto &command_type_str = *cmd_tokens_vec.begin();
          ^
common/beerocks/bcl/source/beerocks_ucc_listener.cpp:869:88: style: Parameter 'tlv_hex_list' can be declared with const [constParameter]
bool tlvPrefilledData::add_tlvs_from_list(std::list<beerocks_ucc_listener::tlv_hex_t> &tlv_hex_list,
                                                                                       ^
common/beerocks/bcl/source/beerocks_ucc_listener.cpp:212:26: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
        mandatory_params.push_back(param_name.first);
                         ^
common/beerocks/bcl/source/beerocks_ucc_listener.cpp:320:97: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                          validate_binary_notation(value) || validate_decimal_notation(value))) {
                                                                                                ^
common/beerocks/bcl/source/beerocks_utils.cpp:16:61: performance: Function parameter 'val' should be passed by const reference. [passedByValue]
int utils::write_to_file(std::string full_path, std::string val)
                                                            ^
common/beerocks/bcl/source/beerocks_utils.cpp:218:47: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for (it = list.begin(); it != list.end(); it++) {
                                              ^
common/beerocks/bcl/source/beerocks_version.cpp:23:40: performance: Function parameter 'ver' should be passed by const reference. [passedByValue]
beerocks::version::version(std::string ver, std::string build_date, std::string build_rev)
                                       ^
common/beerocks/bcl/source/beerocks_version.cpp:23:57: performance: Function parameter 'build_date' should be passed by const reference. [passedByValue]
beerocks::version::version(std::string ver, std::string build_date, std::string build_rev)
                                                        ^
common/beerocks/bcl/source/beerocks_version.cpp:23:81: performance: Function parameter 'build_rev' should be passed by const reference. [passedByValue]
beerocks::version::version(std::string ver, std::string build_date, std::string build_rev)
                                                                                ^
common/beerocks/bcl/source/network/socket.cpp:77:5: performance: Variable 'm_socket' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    m_socket           = s;
    ^
common/beerocks/bcl/source/network/socket.cpp:86:5: performance: Variable 'm_socket' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    m_socket    = s;
    ^
common/beerocks/bcl/source/network/socket.cpp:87:5: performance: Variable 'm_peer_ip' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    m_peer_ip   = peer_ip;
    ^
common/beerocks/bcl/source/network/socket.cpp:518:14: style: The scope of the variable 'i' can be reduced. [variableScope]
    unsigned i;
             ^
common/beerocks/bcl/source/network/socket.cpp:84:38: performance: Function parameter 'peer_ip' should be passed by const reference. [passedByValue]
Socket::Socket(SOCKET s, std::string peer_ip, int port_port, long readTimeout)
                                     ^
common/beerocks/bcl/source/network/socket.cpp:508:23: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
        if (soc == s) {
                      ^
common/beerocks/bcl/source/network/socket.cpp:525:41: style: Unused variable: it [unusedVariable]
        std::vector<Socket *>::iterator it;
                                        ^
common/beerocks/bcl/source/network/network_utils.cpp:638:12: style: Condition '!up' is always true [knownConditionTrueFalse]
    while (!up) {
           ^
common/beerocks/bcl/source/network/network_utils.cpp:912:9: style: The scope of the variable 'rtInfo_ret' can be reduced. [variableScope]
    int rtInfo_ret;
        ^
common/beerocks/bcl/source/network/network_utils.cpp:832:32: style: Local variable 'ecmd' shadows outer variable [shadowVariable]
            struct ethtool_cmd ecmd;
                               ^
common/beerocks/bcl/source/network/network_utils.cpp:248:42: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
        if (ip_info.iface == iface_name) {
                                         ^
common/beerocks/bcl/source/network/network_utils.cpp:512:0: information: Skipping configuration 'SIOCBRADDIF' since the value of 'SIOCBRADDIF' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    err             = ioctl(br_socket_fd, SIOCBRADDIF, &ifr);
^
common/beerocks/bcl/source/network/network_utils.cpp:556:0: information: Skipping configuration 'SIOCBRDELIF' since the value of 'SIOCBRDELIF' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    err             = ioctl(br_socket_fd, SIOCBRDELIF, &ifr);
^
common/beerocks/bcl/source/son/son_wireless_utils.cpp:614:24: style: Condition 'prev_bw<=bw' is always true [knownConditionTrueFalse]
    } else if (prev_bw <= bw) {
                       ^
common/beerocks/bcl/source/son/son_wireless_utils.cpp:319:14: style: The scope of the variable 'rate_temp' can be reduced. [variableScope]
    uint16_t rate_temp;
             ^
common/beerocks/bcl/source/son/son_wireless_utils.cpp:320:14: style: The scope of the variable 'diff_temp' can be reduced. [variableScope]
    uint16_t diff_temp;
             ^
agent/src/beerocks/slave/son_slave_thread.cpp:82:15: warning: Member variable 'slave_thread::platform_settings' is not initialized in the constructor. [uninitMemberVar]
slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
              ^
agent/src/beerocks/slave/son_slave_thread.cpp:82:15: warning: Member variable 'slave_thread::wlan_settings' is not initialized in the constructor. [uninitMemberVar]
slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
              ^
agent/src/beerocks/slave/son_slave_thread.cpp:82:15: warning: Member variable 'slave_thread::son_config' is not initialized in the constructor. [uninitMemberVar]
slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
              ^
agent/src/beerocks/slave/son_slave_thread.cpp:82:15: warning: Member variable 'slave_thread::connected_4addr_mode' is not initialized in the constructor. [uninitMemberVar]
slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
              ^
agent/src/beerocks/slave/son_slave_thread.cpp:82:15: warning: Member variable 'slave_thread::hostap_params_available' is not initialized in the constructor. [uninitMemberVar]
slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
              ^
agent/src/beerocks/slave/son_slave_thread.cpp:82:15: warning: Member variable 'slave_thread::backhaul_params' is not initialized in the constructor. [uninitMemberVar]
slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
              ^
agent/src/beerocks/slave/son_slave_thread.cpp:82:15: warning: Member variable 'slave_thread::hostap_params' is not initialized in the constructor. [uninitMemberVar]
slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
              ^
agent/src/beerocks/slave/son_slave_thread.cpp:82:15: warning: Member variable 'slave_thread::hostap_cs_params' is not initialized in the constructor. [uninitMemberVar]
slave_thread::slave_thread(sSlaveConfig conf, beerocks::logging &logger_)
              ^
agent/src/beerocks/slave/son_slave_thread.cpp:87:5: performance: Variable 'slave_uds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    slave_uds   = conf.temp_path + std::string(BEEROCKS_SLAVE_UDS) + "_" + conf.hostap_iface;
    ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport.h:50:1: style: The class 'Ieee1905Transport' does not have a constructor although it has private member variables. [noConstructor]
class Ieee1905Transport {
^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:80:31: style: The function 'topic' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual const std::string topic() const
                              ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:95:27: style: The function 'print' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual std::ostream &print(std::ostream &os) const
                          ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:148:31: style: The function 'topic_prefix' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual const std::string topic_prefix() const { return kTopicPrefix; }
                              ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:164:31: style: The function 'topic_prefix' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual const std::string topic_prefix() const { return kTopicPrefix; }
                              ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:208:31: style: The function 'topic' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual const std::string topic() const
                              ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:225:27: style: The function 'print' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual std::ostream &print(std::ostream &os) const
                          ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:311:27: style: The function 'print' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual std::ostream &print(std::ostream &os) const
                          ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:333:31: style: The function 'topic' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual const std::string topic() const { return topic_prefix(); }
                              ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:343:31: style: The function 'topic_prefix' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual const std::string topic_prefix() const { return kTopicPrefix; }
                              ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:353:31: style: The function 'topic_prefix' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual const std::string topic_prefix() const { return kTopicPrefix; }
                              ^
agent/src/beerocks/slave/son_slave_thread.cpp:4179:14: style: Local variable 'notification' shadows outer variable [shadowVariable]
        auto notification = message_com::create_vs_message<
             ^
agent/src/beerocks/slave/son_slave_thread.cpp:4205:14: style: Local variable 'notification' shadows outer variable [shadowVariable]
        auto notification = message_com::create_vs_message<
             ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:85:41: style: C-style pointer casting [cstyleCast]
    Metadata *metadata() const { return (Metadata *)frames().back().data(); };
                                        ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:222:16: style: C-style pointer casting [cstyleCast]
        return (Metadata *)frames().back().data();
               ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:309:41: style: C-style pointer casting [cstyleCast]
    Metadata *metadata() const { return (Metadata *)frames().back().data(); };
                                        ^
framework/common/include/mapf/common/message.h:73:19: style: Local variable 'frame' shadows outer function [shadowFunction]
        for (auto frame : frames)
                  ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:135:28: style: Local variable 'topic' shadows outer function [shadowFunction]
        std::ostringstream topic;
                           ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:248:28: style: Local variable 'topic' shadows outer function [shadowFunction]
        std::ostringstream topic;
                           ^
framework/common/include/mapf/broker/broker_config.h:21:67: performance: Function parameter 'xsub_secret' should be passed by const reference. [passedByValue]
    BrokerSecurity(bool enable, unsigned int key_len, std::string xsub_secret,
                                                                  ^
framework/common/include/mapf/broker/broker_config.h:22:32: performance: Function parameter 'xsub_public' should be passed by const reference. [passedByValue]
                   std::string xsub_public, std::string pub_secret, std::string pub_public,
                               ^
framework/common/include/mapf/broker/broker_config.h:22:57: performance: Function parameter 'pub_secret' should be passed by const reference. [passedByValue]
                   std::string xsub_public, std::string pub_secret, std::string pub_public,
                                                        ^
framework/common/include/mapf/broker/broker_config.h:22:81: performance: Function parameter 'pub_public' should be passed by const reference. [passedByValue]
                   std::string xsub_public, std::string pub_secret, std::string pub_public,
                                                                                ^
framework/common/include/mapf/broker/broker_config.h:23:32: performance: Function parameter 'xpub_secret' should be passed by const reference. [passedByValue]
                   std::string xpub_secret, std::string xpub_public, std::string sub_secret,
                               ^
framework/common/include/mapf/broker/broker_config.h:23:57: performance: Function parameter 'xpub_public' should be passed by const reference. [passedByValue]
                   std::string xpub_secret, std::string xpub_public, std::string sub_secret,
                                                        ^
framework/common/include/mapf/broker/broker_config.h:23:82: performance: Function parameter 'sub_secret' should be passed by const reference. [passedByValue]
                   std::string xpub_secret, std::string xpub_public, std::string sub_secret,
                                                                                 ^
agent/src/beerocks/slave/son_slave_thread.cpp:4488:45: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
        if (channel_to_check == ch.channel) {
                                            ^
framework/common/include/mapf/broker/broker_config.h:24:32: performance: Function parameter 'sub_public' should be passed by const reference. [passedByValue]
                   std::string sub_public)
                               ^
framework/common/include/mapf/common/logger.h:41:36: performance: Function parameter 'param' should be passed by const reference. [passedByValue]
        void set_level(std::string param) { level_ = param; }
                                   ^
framework/common/include/mapf/common/logger.h:42:40: performance: Function parameter 'param' should be passed by const reference. [passedByValue]
        void set_file_path(std::string param) { file_path_ = param; }
                                       ^
framework/common/include/mapf/broker/broker_interface.h:23:71: performance: Function parameter 'sync_topic' should be passed by const reference. [passedByValue]
    BrokerInterface(Context &ctx, const std::string &cfg, std::string sync_topic = "hello")
                                                                      ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:132:60: performance: Function parameter 'prefix' should be passed by const reference. [passedByValue]
    static const std::string build_topic(const std::string prefix, uint16_t ether_type,
                                                           ^
framework/transport/ieee1905_transport/include/mapf/transport/ieee1905_transport_messages.h:245:60: performance: Function parameter 'prefix' should be passed by const reference. [passedByValue]
    static const std::string build_topic(const std::string prefix, uint16_t ether_type,
                                                           ^
common/beerocks/btl/btl_local_bus.cpp:79:53: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
        if (!subscribe_topic_to_bus(bus, msg_type)) {
                                                    ^
common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp:104:50: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
ap_wlan_hal_dummy::ap_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback,
                                                 ^
common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp:53:9: style: struct member 'DUMMY_acs_report_get::Ch' is never used. [unusedStructMember]
    int Ch;
        ^
common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp:54:9: style: struct member 'DUMMY_acs_report_get::BW' is never used. [unusedStructMember]
    int BW;
        ^
common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp:55:9: style: struct member 'DUMMY_acs_report_get::DFS' is never used. [unusedStructMember]
    int DFS;
        ^
common/beerocks/bwl/dummy/ap_wlan_hal_dummy.cpp:56:9: style: struct member 'DUMMY_acs_report_get::bss' is never used. [unusedStructMember]
    int bss;
        ^
common/beerocks/bwl/dummy/base_wlan_hal_dummy.cpp:232:68: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
base_wlan_hal_dummy::base_wlan_hal_dummy(HALType type, std::string iface_name,
                                                                   ^
common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp:171:13: style: The scope of the variable 'tmp_int' can be reduced. [variableScope]
    int64_t tmp_int;
            ^
common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp:261:13: style: The scope of the variable 'tmp_int' can be reduced. [variableScope]
    int64_t tmp_int;
            ^
common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp:65:52: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
mon_wlan_hal_dummy::mon_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback)
                                                   ^
common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp:79:61: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
bool mon_wlan_hal_dummy::update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats)
                                                            ^
common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp:85:66: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
bool mon_wlan_hal_dummy::update_stations_stats(const std::string vap_iface_name,
                                                                 ^
common/beerocks/bwl/dummy/mon_wlan_hal_dummy.cpp:86:66: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
                                               const std::string sta_mac, SStaStats &sta_stats)
                                                                 ^
common/beerocks/bwl/dwpal/ap_wlan_hal_dwpal.cpp:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
common/beerocks/bwl/dummy/sta_wlan_hal_dummy.cpp:19:52: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
sta_wlan_hal_dummy::sta_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback)
                                                   ^
common/beerocks/bwl/dwpal/base_wlan_hal_dwpal.cpp:78:68: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
base_wlan_hal_dwpal::base_wlan_hal_dwpal(HALType type, std::string iface_name,
                                                                   ^
common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp:235:13: style: The scope of the variable 'rate_mbs_fp_8_1' can be reduced. [variableScope]
    uint8_t rate_mbs_fp_8_1;
            ^
common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp:236:14: style: The scope of the variable 'rate_kbs' can be reduced. [variableScope]
    uint32_t rate_kbs;
             ^
common/beerocks/bwl/dwpal/base_wlan_hal_dwpal.cpp:275:25: style: Consider using std::count_if algorithm instead of a raw loop. [useStlAlgorithm]
                        attached++;
                        ^
common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp:454:52: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
mon_wlan_hal_dwpal::mon_wlan_hal_dwpal(std::string iface_name, hal_event_cb_t callback)
                                                   ^
common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp:522:61: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
bool mon_wlan_hal_dwpal::update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats)
                                                            ^
common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp:587:66: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
bool mon_wlan_hal_dwpal::update_stations_stats(const std::string vap_iface_name,
                                                                 ^
common/beerocks/bwl/dwpal/mon_wlan_hal_dwpal.cpp:588:66: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
                                               const std::string sta_mac, SStaStats &sta_stats)
                                                                 ^
common/beerocks/bwl/dwpal/sta_wlan_hal_dwpal.cpp:94:52: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
sta_wlan_hal_dwpal::sta_wlan_hal_dwpal(std::string iface_name, hal_event_cb_t callback)
                                                   ^
common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp:104:50: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
ap_wlan_hal_dummy::ap_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback,
                                                 ^
common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp:53:9: style: struct member 'DUMMY_acs_report_get::Ch' is never used. [unusedStructMember]
    int Ch;
        ^
common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp:54:9: style: struct member 'DUMMY_acs_report_get::BW' is never used. [unusedStructMember]
    int BW;
        ^
common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp:55:9: style: struct member 'DUMMY_acs_report_get::DFS' is never used. [unusedStructMember]
    int DFS;
        ^
common/beerocks/bwl/econet/ap_wlan_hal_econet.cpp:56:9: style: struct member 'DUMMY_acs_report_get::bss' is never used. [unusedStructMember]
    int bss;
        ^
common/beerocks/bwl/econet/base_wlan_hal_econet.cpp:232:68: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
base_wlan_hal_dummy::base_wlan_hal_dummy(HALType type, std::string iface_name,
                                                                   ^
common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp:165:13: style: The scope of the variable 'tmp_int' can be reduced. [variableScope]
    int64_t tmp_int;
            ^
common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp:255:13: style: The scope of the variable 'tmp_int' can be reduced. [variableScope]
    int64_t tmp_int;
            ^
common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp:65:52: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
mon_wlan_hal_dummy::mon_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback)
                                                   ^
common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp:79:61: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
bool mon_wlan_hal_dummy::update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats)
                                                            ^
common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp:85:66: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
bool mon_wlan_hal_dummy::update_stations_stats(const std::string vap_iface_name,
                                                                 ^
common/beerocks/bwl/econet/mon_wlan_hal_econet.cpp:86:66: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
                                               const std::string sta_mac, SStaStats &sta_stats)
                                                                 ^
common/beerocks/bwl/econet/sta_wlan_hal_econet.cpp:19:52: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
sta_wlan_hal_dummy::sta_wlan_hal_dummy(std::string iface_name, hal_event_cb_t callback)
                                                   ^
common/beerocks/bwl/nl80211/ap_wlan_hal_nl80211.cpp:115:54: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
ap_wlan_hal_nl80211::ap_wlan_hal_nl80211(std::string iface_name, hal_event_cb_t callback,
                                                     ^
common/beerocks/bwl/nl80211/base_wlan_hal_nl80211.cpp:391:51: style: C-style pointer casting [cstyleCast]
                m_fd_ext_events = wpa_ctrl_get_fd((wpa_ctrl *)m_wpa_ctrl_event);
                                                  ^
common/beerocks/bwl/nl80211/base_wlan_hal_nl80211.cpp:963:13: style: A pointer can not be negative so it is either pointless or an error to check if it is. [pointerLessThanZero]
    if (err < 0) {
            ^
common/beerocks/bwl/nl80211/base_wlan_hal_nl80211.cpp:203:72: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
base_wlan_hal_nl80211::base_wlan_hal_nl80211(HALType type, std::string iface_name,
                                                                       ^
common/beerocks/bwl/nl80211/mon_wlan_hal_nl80211.cpp:87:56: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
mon_wlan_hal_nl80211::mon_wlan_hal_nl80211(std::string iface_name, hal_event_cb_t callback)
                                                       ^
common/beerocks/bwl/nl80211/mon_wlan_hal_nl80211.cpp:117:63: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
bool mon_wlan_hal_nl80211::update_vap_stats(const std::string vap_iface_name, SVapStats &vap_stats)
                                                              ^
common/beerocks/bwl/nl80211/mon_wlan_hal_nl80211.cpp:144:68: performance: Function parameter 'vap_iface_name' should be passed by const reference. [passedByValue]
bool mon_wlan_hal_nl80211::update_stations_stats(const std::string vap_iface_name,
                                                                   ^
common/beerocks/bwl/nl80211/mon_wlan_hal_nl80211.cpp:145:68: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
                                                 const std::string sta_mac, SStaStats &sta_stats)
                                                                   ^
common/beerocks/bwl/shared/netlink_socket.cpp:141:13: style: Local variable 'rc' shadows outer variable [shadowVariable]
        int rc = nl_recvmsgs(m_nl_socket.get(), nl_callback.get());
            ^
common/beerocks/bwl/nl80211/sta_wlan_hal_nl80211.cpp:19:56: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
sta_wlan_hal_nl80211::sta_wlan_hal_nl80211(std::string iface_name, hal_event_cb_t callback)
                                                       ^
common/beerocks/bwl/shared/nl80211_socket.cpp:51:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (result) {
        ^
common/beerocks/tlvf/src/src/beerocks_message.cpp:43:75: style: Parameter 'cmdu' can be declared with const [constParameter]
message::sUdsHeader *message_com::get_uds_header(ieee1905_1::CmduMessage &cmdu)
                                                                          ^
common/beerocks/tlvf/src/src/beerocks_message.cpp:178:78: style: Parameter 'cmdu_rx' can be declared with const [constParameter]
bool message_com::forward_cmdu_to_uds(Socket *sd, ieee1905_1::CmduMessageRx &cmdu_rx,
                                                                             ^
controller/src/beerocks/bml/bml_utils.cpp:332:27: style: C-style pointer casting [cstyleCast]
        auto event_data = (BML_EVENT_BSS_TM_REQ *)(event->data);
                          ^
controller/src/beerocks/bml/bml_utils.cpp:339:27: style: C-style pointer casting [cstyleCast]
        auto event_data = (BML_EVENT_BH_ROAM_REQ *)(event->data);
                          ^
controller/src/beerocks/bml/bml_utils.cpp:346:27: style: C-style pointer casting [cstyleCast]
        auto event_data = (BML_EVENT_CLIENT_ALLOW_REQ *)(event->data);
                          ^
controller/src/beerocks/bml/bml_utils.cpp:354:27: style: C-style pointer casting [cstyleCast]
        auto event_data = (BML_EVENT_CLIENT_ALLOW_REQ *)(event->data);
                          ^
controller/src/beerocks/bml/bml_utils.cpp:361:27: style: C-style pointer casting [cstyleCast]
        auto event_data = (BML_EVENT_ACS_START *)(event->data);
                          ^
controller/src/beerocks/bml/bml_utils.cpp:367:27: style: C-style pointer casting [cstyleCast]
        auto event_data = (BML_EVENT_CSA_NOTIFICATION *)(event->data);
                          ^
controller/src/beerocks/bml/bml_utils.cpp:379:27: style: C-style pointer casting [cstyleCast]
        auto event_data = (BML_EVENT_CAC_STATUS_CHANGED_NOTIFICATION *)(event->data);
                          ^
controller/src/beerocks/bml/bml.cpp:68:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:84:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:93:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:102:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:112:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:121:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:130:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:139:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:150:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:161:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:170:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:179:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:191:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:202:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:209:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:216:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:223:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:234:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:245:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:265:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:276:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:288:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:298:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:310:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:320:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:332:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:342:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:352:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:362:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:372:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:382:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:392:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:402:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:412:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:422:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:432:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:442:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:452:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:463:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:473:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:494:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:507:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:519:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:533:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:545:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml.cpp:557:26: style: C-style pointer casting [cstyleCast]
    bml_internal *pBML = (bml_internal *)ctx;
                         ^
controller/src/beerocks/bml/bml_utils.cpp:386:27: style: C-style pointer casting [cstyleCast]
        auto event_data = (BML_EVENT_STEERING *)(event->data);
                          ^
controller/src/beerocks/bml/internal/bml_internal.h:34:35: performance: Function parameter 'beerocks_conf_path' should be passed by const reference. [passedByValue]
    int connect(const std::string beerocks_conf_path);
                                  ^
controller/src/beerocks/bml/internal/bml_internal.h:55:48: performance: Function parameter 'ssid' should be passed by const reference. [passedByValue]
    int set_wifi_credentials(const std::string ssid, const std::string pass, int sec, int vap_id,
                                               ^
controller/src/beerocks/bml/internal/bml_internal.h:55:72: performance: Function parameter 'pass' should be passed by const reference. [passedByValue]
    int set_wifi_credentials(const std::string ssid, const std::string pass, int sec, int vap_id,
                                                                       ^
controller/src/beerocks/bml/internal/bml_internal.h:131:41: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]
    int set_log_level(const std::string module_name, const std::string log_level, uint8_t on,
                                        ^
controller/src/beerocks/bml/internal/bml_internal.h:131:72: performance: Function parameter 'log_level' should be passed by const reference. [passedByValue]
    int set_log_level(const std::string module_name, const std::string log_level, uint8_t on,
                                                                       ^
controller/src/beerocks/bml/internal/bml_internal.h:132:41: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
                      const std::string mac);
                                        ^
controller/src/beerocks/bml/internal/bml_internal.h:138:87: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
    int set_restricted_channels(const uint8_t *restricted_channels, const std::string mac,
                                                                                      ^
controller/src/beerocks/bml/internal/bml_internal.h:142:81: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
    int get_restricted_channels(uint8_t *restricted_channels, const std::string mac,
                                                                                ^
controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.h:93:17: style: The function 'process_cmdu_header' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual int process_cmdu_header(std::shared_ptr<beerocks::beerocks_header> beerocks_header);
                ^
controller/src/beerocks/bml/rdkb/bml_rdkb.cpp:70:31: style: C-style pointer casting [cstyleCast]
    bml_rdkb_internal *pBML = (bml_rdkb_internal *)ctx;
                              ^
controller/src/beerocks/bml/rdkb/bml_rdkb.cpp:90:31: style: C-style pointer casting [cstyleCast]
    bml_rdkb_internal *pBML = (bml_rdkb_internal *)ctx;
                              ^
controller/src/beerocks/bml/rdkb/bml_rdkb.cpp:103:31: style: C-style pointer casting [cstyleCast]
    bml_rdkb_internal *pBML = (bml_rdkb_internal *)ctx;
                              ^
controller/src/beerocks/bml/rdkb/bml_rdkb.cpp:115:31: style: C-style pointer casting [cstyleCast]
    bml_rdkb_internal *pBML = (bml_rdkb_internal *)ctx;
                              ^
controller/src/beerocks/bml/rdkb/bml_rdkb.cpp:128:31: style: C-style pointer casting [cstyleCast]
    bml_rdkb_internal *pBML = (bml_rdkb_internal *)ctx;
                              ^
controller/src/beerocks/bml/rdkb/bml_rdkb.cpp:141:31: style: C-style pointer casting [cstyleCast]
    bml_rdkb_internal *pBML = (bml_rdkb_internal *)ctx;
                              ^
controller/src/beerocks/cli/beerocks_cli.cpp:118:10: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
         it++) {
         ^
controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.cpp:347:23: style: C-style pointer casting [cstyleCast]
        event->data = GET_MESSAGE_POINTER(BML_EVENT_STEERING, data_buffer, size);
                      ^
controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.cpp:86:10: style: Variable 'iRet' is reassigned a value before the old one has been used. [redundantAssignment]
    iRet = prmRdkbWlan.get_value();
         ^
controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.cpp:153:10: style: Variable 'iRet' is reassigned a value before the old one has been used. [redundantAssignment]
    iRet = prmRdkbWlan.get_value();
         ^
controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.cpp:219:10: style: Variable 'iRet' is reassigned a value before the old one has been used. [redundantAssignment]
    iRet = prmRdkbWlan.get_value();
         ^
controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.cpp:268:10: style: Variable 'iRet' is reassigned a value before the old one has been used. [redundantAssignment]
    iRet = prmRdkbWlan.get_value();
         ^
controller/src/beerocks/bml/rdkb/internal/bml_rdkb_internal.cpp:320:10: style: Variable 'iRet' is reassigned a value before the old one has been used. [redundantAssignment]
    iRet = prmRdkbWlan.get_value();
         ^
controller/src/beerocks/cli/beerocks_cli_main.cpp:196:28: style: Redundant initialization for 'cli_ptr'. The initialized value is overwritten before it is read. [redundantInitialization]
    beerocks::cli *cli_ptr = &cli_soc;
                           ^
controller/src/beerocks/cli/beerocks_cli_bml.h:162:42: performance: Function parameter 'iface' should be passed by const reference. [passedByValue]
    int wps_onboarding(const std::string iface = std::string());
                                         ^
controller/src/beerocks/cli/beerocks_cli_main.cpp:402:39: performance: Function parameter 'temp_path' should be passed by const reference. [passedByValue]
static void cli_tcp_proxy(std::string temp_path)
                                      ^
controller/src/beerocks/cli/beerocks_cli_main.cpp:180:13: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
        cmd += token + " ";
            ^
controller/src/beerocks/cli/beerocks_cli_main.cpp:171:25: style: Variable 'pos' is assigned a value that is never used. [unreadVariable]
        } else if ((pos = token->find("!")) != std::string::npos) {
                        ^
controller/src/beerocks/cli/beerocks_cli_main.cpp:272:28: style: Variable 'cli_ptr' is assigned a value that is never used. [unreadVariable]
    beerocks::cli *cli_ptr = &cli_soc;
                           ^
controller/src/beerocks/cli/beerocks_cli_bml.cpp:123:56: performance: Function parameter 'ind' should be passed by const reference. [passedByValue]
    const std::string &parent_bssid, const std::string ind, std::stringstream &ss)
                                                       ^
controller/src/beerocks/cli/beerocks_cli_bml.cpp:293:30: performance: Function parameter 'beerocks_conf_path_' should be passed by const reference. [passedByValue]
cli_bml::cli_bml(std::string beerocks_conf_path_)
                             ^
controller/src/beerocks/cli/beerocks_cli_proxy.cpp:23:5: performance: Variable 'master_uds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    master_uds  = master_uds_;
    ^
controller/src/beerocks/cli/beerocks_cli_proxy.cpp:20:34: performance: Function parameter 'master_uds_' should be passed by const reference. [passedByValue]
cli_proxy::cli_proxy(std::string master_uds_) : socket_thread()
                                 ^
controller/src/beerocks/master/db/node.h:277:13: performance: Variable 'timestamp' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
            timestamp = std::chrono::steady_clock::now();
            ^
controller/src/beerocks/master/db/node.h:291:13: performance: Variable 'timestamp' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
            timestamp = std::chrono::steady_clock::now();
            ^
controller/src/beerocks/master/db/node.h:40:51: performance: Function parameter 'mac_' should be passed by const reference. [passedByValue]
    node(beerocks::eType type_, const std::string mac_);
                                                  ^
controller/src/beerocks/master/db/node.h:273:38: performance: Function parameter 'ap_mac_' should be passed by const reference. [passedByValue]
        rssi_measurement(std::string ap_mac_, int8_t rssi_, int8_t packets_) : ap_mac(ap_mac_)
                                     ^
controller/src/beerocks/master/db/node.h:287:40: performance: Function parameter 'ap_mac_' should be passed by const reference. [passedByValue]
        beacon_measurement(std::string ap_mac_, int8_t rcpi_, uint8_t rsni_) : ap_mac(ap_mac_)
                                       ^
controller/src/beerocks/master/beerocks_master_main.cpp:116:70: style: Parameter 'main_master_conf' can be declared with const [constParameter]
                               beerocks::config_file::sConfigMaster &main_master_conf)
                                                                     ^
controller/src/beerocks/master/beerocks_master_main.cpp:310:11: style: Variable 'bridge_iface' can be declared with const [constVariable]
    auto &bridge_iface = beerocks_slave_conf.bridge_iface;
          ^
controller/src/beerocks/master/controller_ucc_listener.cpp:196:11: style: Variable 'operating_class_str' can be declared with const [constVariable]
    auto &operating_class_str = confs[1];
          ^
controller/src/beerocks/master/controller_ucc_listener.cpp:220:11: style: Variable 'authentication_type_str' can be declared with const [constVariable]
    auto &authentication_type_str = confs[3];
          ^
controller/src/beerocks/master/controller_ucc_listener.cpp:235:11: style: Variable 'encryption_type_str' can be declared with const [constVariable]
    auto &encryption_type_str = confs[4];
          ^
controller/src/beerocks/master/controller_ucc_listener.cpp:257:11: style: Variable 'bit_6_str' can be declared with const [constVariable]
    auto &bit_6_str = confs[6];
          ^
controller/src/beerocks/master/controller_ucc_listener.cpp:265:11: style: Variable 'bit_5_str' can be declared with const [constVariable]
    auto &bit_5_str = confs[7];
          ^
controller/src/beerocks/cli/beerocks_cli_socket.cpp:26:36: performance: Function parameter 'temp_path_' should be passed by const reference. [passedByValue]
cli_socket::cli_socket(std::string temp_path_, std::string proxy_ip_)
                                   ^
controller/src/beerocks/cli/beerocks_cli_socket.cpp:26:60: performance: Function parameter 'proxy_ip_' should be passed by const reference. [passedByValue]
cli_socket::cli_socket(std::string temp_path_, std::string proxy_ip_)
                                                           ^
controller/src/beerocks/cli/beerocks_cli_socket.cpp:787:87: performance: Function parameter 'mode' should be passed by const reference. [passedByValue]
                                      uint16_t repeats, int16_t op_class, std::string mode)
                                                                                      ^
controller/src/beerocks/bml/internal/bml_internal.cpp:206:45: performance: Function parameter 'beerocks_conf_path' should be passed by const reference. [passedByValue]
int bml_internal::connect(const std::string beerocks_conf_path)
                                            ^
controller/src/beerocks/bml/internal/bml_internal.cpp:1946:58: performance: Function parameter 'ssid' should be passed by const reference. [passedByValue]
int bml_internal::set_wifi_credentials(const std::string ssid, const std::string pass, int sec,
                                                         ^
controller/src/beerocks/bml/internal/bml_internal.cpp:1946:82: performance: Function parameter 'pass' should be passed by const reference. [passedByValue]
int bml_internal::set_wifi_credentials(const std::string ssid, const std::string pass, int sec,
                                                                                 ^
controller/src/beerocks/bml/internal/bml_internal.cpp:2730:51: performance: Function parameter 'module_name' should be passed by const reference. [passedByValue]
int bml_internal::set_log_level(const std::string module_name, const std::string log_level,
                                                  ^
controller/src/beerocks/bml/internal/bml_internal.cpp:2730:82: performance: Function parameter 'log_level' should be passed by const reference. [passedByValue]
int bml_internal::set_log_level(const std::string module_name, const std::string log_level,
                                                                                 ^
controller/src/beerocks/bml/internal/bml_internal.cpp:2731:63: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
                                uint8_t on, const std::string mac)
                                                              ^
controller/src/beerocks/bml/internal/bml_internal.cpp:2867:97: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int bml_internal::set_restricted_channels(const uint8_t *restricted_channels, const std::string mac,
                                                                                                ^
controller/src/beerocks/bml/internal/bml_internal.cpp:2918:91: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int bml_internal::get_restricted_channels(uint8_t *restricted_channels, const std::string mac,
                                                                                          ^
controller/src/beerocks/master/db/db.cpp:1120:9: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
        return -1;
        ^
controller/src/beerocks/master/db/db.cpp:1123:9: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
        return -1;
        ^
controller/src/beerocks/master/db/db.cpp:3143:9: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
        return -1;
        ^
controller/src/beerocks/master/db/db.cpp:3146:9: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
        return -1;
        ^
controller/src/beerocks/master/db/db.cpp:2559:10: style: The scope of the variable 'listener_exist' can be reduced. [variableScope]
    bool listener_exist;
         ^
controller/src/beerocks/master/db/db.cpp:157:36: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_type(std::string mac, beerocks::eType type)
                                   ^
controller/src/beerocks/master/db/db.cpp:167:47: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
beerocks::eType db::get_node_type(std::string mac)
                                              ^
controller/src/beerocks/master/db/db.cpp:176:42: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_local_slave_mac(std::string mac)
                                         ^
controller/src/beerocks/master/db/db.cpp:206:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_manufacturer(std::string mac, std::string manufacturer)
                                           ^
controller/src/beerocks/master/db/db.cpp:206:61: performance: Function parameter 'manufacturer' should be passed by const reference. [passedByValue]
bool db::set_node_manufacturer(std::string mac, std::string manufacturer)
                                                            ^
controller/src/beerocks/master/db/db.cpp:216:51: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_node_manufacturer(std::string mac)
                                                  ^
controller/src/beerocks/master/db/db.cpp:225:38: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_channel(std::string mac)
                                     ^
controller/src/beerocks/master/db/db.cpp:248:38: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_vap_id(std::string mac, int8_t vap_id)
                                     ^
controller/src/beerocks/master/db/db.cpp:258:40: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int8_t db::get_node_vap_id(std::string mac)
                                       ^
controller/src/beerocks/master/db/db.cpp:267:37: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_cs_op_flag(std::string mac)
                                    ^
controller/src/beerocks/master/db/db.cpp:276:37: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_cs_op_flag(std::string mac, bool flag)
                                    ^
controller/src/beerocks/master/db/db.cpp:286:37: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_cs_lb_flag(std::string mac)
                                    ^
controller/src/beerocks/master/db/db.cpp:295:37: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_cs_lb_flag(std::string mac, bool flag)
                                    ^
controller/src/beerocks/master/db/db.cpp:318:58: performance: Function parameter 'hostap_mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_conf_restricted_channels(std::string hostap_mac, uint8_t *restricted_channels)
                                                         ^
controller/src/beerocks/master/db/db.cpp:340:74: performance: Function parameter 'hostap_mac' should be passed by const reference. [passedByValue]
std::vector<uint8_t> db::get_hostap_conf_restricted_channels(std::string hostap_mac)
                                                                         ^
controller/src/beerocks/master/db/db.cpp:354:17: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
    std::string mac, beerocks::eBeaconMeasurementSupportLevel support_beacon_measurement)
                ^
controller/src/beerocks/master/db/db.cpp:367:59: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
db::get_node_beacon_measurement_support_level(std::string mac)
                                                          ^
controller/src/beerocks/master/db/db.cpp:376:36: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_name(std::string mac, std::string name)
                                   ^
controller/src/beerocks/master/db/db.cpp:376:53: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
bool db::set_node_name(std::string mac, std::string name)
                                                    ^
controller/src/beerocks/master/db/db.cpp:386:43: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_node_name(std::string mac)
                                          ^
controller/src/beerocks/master/db/db.cpp:395:37: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_state(std::string mac, beerocks::eNodeState state)
                                    ^
controller/src/beerocks/master/db/db.cpp:406:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
beerocks::eNodeState db::get_node_state(std::string mac)
                                                    ^
controller/src/beerocks/master/db/db.cpp:416:49: performance: Function parameter 'bridge_mac' should be passed by const reference. [passedByValue]
bool db::set_node_operational_state(std::string bridge_mac, bool operational)
                                                ^
controller/src/beerocks/master/db/db.cpp:433:51: performance: Function parameter 'bridge_mac' should be passed by const reference. [passedByValue]
int8_t db::get_node_operational_state(std::string bridge_mac)
                                                  ^
controller/src/beerocks/master/db/db.cpp:449:77: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::chrono::steady_clock::time_point db::get_last_state_change(std::string mac)
                                                                            ^
controller/src/beerocks/master/db/db.cpp:458:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_handoff_flag(std::string mac, bool handoff)
                                           ^
controller/src/beerocks/master/db/db.cpp:472:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_node_handoff_flag(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:487:45: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_confined_flag(std::string mac, bool flag)
                                            ^
controller/src/beerocks/master/db/db.cpp:498:45: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_node_confined_flag(std::string mac)
                                            ^
controller/src/beerocks/master/db/db.cpp:508:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::update_node_last_seen(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:519:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::update_node_last_ping_sent(std::string mac)
                                                ^
controller/src/beerocks/master/db/db.cpp:530:74: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::chrono::steady_clock::time_point db::get_node_last_seen(std::string mac)
                                                                         ^
controller/src/beerocks/master/db/db.cpp:541:79: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::chrono::steady_clock::time_point db::get_node_last_ping_sent(std::string mac)
                                                                              ^
controller/src/beerocks/master/db/db.cpp:551:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::update_node_last_ping_received(std::string mac, int seq)
                                                    ^
controller/src/beerocks/master/db/db.cpp:581:57: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::update_node_last_ping_received_avg(std::string mac, int total_seq)
                                                        ^
controller/src/beerocks/master/db/db.cpp:592:83: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::chrono::steady_clock::time_point db::get_node_last_ping_received(std::string mac)
                                                                                  ^
controller/src/beerocks/master/db/db.cpp:602:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_last_ping_delta_ms(std::string mac)
                                                ^
controller/src/beerocks/master/db/db.cpp:612:47: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_last_ping_min_ms(std::string mac)
                                              ^
controller/src/beerocks/master/db/db.cpp:622:47: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_last_ping_max_ms(std::string mac)
                                              ^
controller/src/beerocks/master/db/db.cpp:632:47: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_last_ping_avg_ms(std::string mac)
                                              ^
controller/src/beerocks/master/db/db.cpp:653:40: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_active(std::string mac, bool active)
                                       ^
controller/src/beerocks/master/db/db.cpp:666:39: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::is_hostap_active(std::string mac)
                                      ^
controller/src/beerocks/master/db/db.cpp:679:50: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_backhaul_manager(std::string mac, bool is_backhaul_manager)
                                                 ^
controller/src/beerocks/master/db/db.cpp:692:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::is_hostap_backhaul_manager(std::string mac)
                                                ^
controller/src/beerocks/master/db/db.cpp:726:40: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::is_ap_out_of_band(std::string mac, std::string sta_mac)
                                       ^
controller/src/beerocks/master/db/db.cpp:726:57: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
bool db::is_ap_out_of_band(std::string mac, std::string sta_mac)
                                                        ^
controller/src/beerocks/master/db/db.cpp:740:39: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::is_node_wireless(std::string mac)
                                      ^
controller/src/beerocks/master/db/db.cpp:750:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::node_to_string(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:764:40: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_hierarchy(std::string mac)
                                       ^
controller/src/beerocks/master/db/db.cpp:870:56: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::set<std::string> db::get_node_subtree(std::string mac)
                                                       ^
controller/src/beerocks/master/db/db.cpp:885:45: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_node_parent(std::string mac)
                                            ^
controller/src/beerocks/master/db/db.cpp:895:52: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_node_parent_hostap(std::string mac)
                                                   ^
controller/src/beerocks/master/db/db.cpp:906:54: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_node_parent_backhaul(std::string mac)
                                                     ^
controller/src/beerocks/master/db/db.cpp:924:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_node_parent_ire(std::string mac)
                                                ^
controller/src/beerocks/master/db/db.cpp:944:54: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_node_previous_parent(std::string mac)
                                                     ^
controller/src/beerocks/master/db/db.cpp:954:57: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::set<std::string> db::get_node_siblings(std::string mac, int type)
                                                        ^
controller/src/beerocks/master/db/db.cpp:985:57: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::set<std::string> db::get_node_children(std::string mac, int type, int state)
                                                        ^
controller/src/beerocks/master/db/db.cpp:1040:95: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
const beerocks::message::sRadioCapabilities *db::get_station_current_capabilities(std::string mac)
                                                                                              ^
controller/src/beerocks/master/db/db.cpp:1115:41: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_ant_num(std::string mac, beerocks::eWiFiAntNum ant_num)
                                        ^
controller/src/beerocks/master/db/db.cpp:1129:58: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
beerocks::eWiFiAntNum db::get_hostap_ant_num(std::string mac)
                                                         ^
controller/src/beerocks/master/db/db.cpp:1142:42: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_ant_gain(std::string mac, int ant_gain)
                                         ^
controller/src/beerocks/master/db/db.cpp:1156:41: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_hostap_ant_gain(std::string mac)
                                        ^
controller/src/beerocks/master/db/db.cpp:1169:42: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_tx_power(std::string mac, int tx_power)
                                         ^
controller/src/beerocks/master/db/db.cpp:1183:41: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_hostap_tx_power(std::string mac)
                                        ^
controller/src/beerocks/master/db/db.cpp:1196:52: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_supported_channels(std::string mac, beerocks::message::sWifiChannel *channels,
                                                   ^
controller/src/beerocks/master/db/db.cpp:1231:47: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
db::get_hostap_supported_channels(std::string mac)
                                              ^
controller/src/beerocks/master/db/db.cpp:1313:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_band_capability(std::string mac, beerocks::eRadioBandCapability capability)
                                                ^
controller/src/beerocks/master/db/db.cpp:1327:75: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
beerocks::eRadioBandCapability db::get_hostap_band_capability(std::string mac)
                                                                          ^
controller/src/beerocks/master/db/db.cpp:1340:39: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::capability_check(std::string mac, int channel)
                                      ^
controller/src/beerocks/master/db/db.cpp:1353:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_node_5ghz_support(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:1362:45: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_node_24ghz_support(std::string mac)
                                            ^
controller/src/beerocks/master/db/db.cpp:1371:36: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::is_node_24ghz(std::string mac)
                                   ^
controller/src/beerocks/master/db/db.cpp:1384:35: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::is_node_5ghz(std::string mac)
                                  ^
controller/src/beerocks/master/db/db.cpp:1397:60: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::update_node_failed_5ghz_steer_attempt(std::string mac)
                                                           ^
controller/src/beerocks/master/db/db.cpp:1410:61: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::update_node_failed_24ghz_steer_attempt(std::string mac)
                                                            ^
controller/src/beerocks/master/db/db.cpp:1423:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::update_node_11v_responsiveness(std::string mac, bool success)
                                                    ^
controller/src/beerocks/master/db/db.cpp:1445:46: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_node_11v_capability(std::string mac)
                                             ^
controller/src/beerocks/master/db/db.cpp:1454:42: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_iface_id(std::string mac, int8_t iface_id)
                                         ^
controller/src/beerocks/master/db/db.cpp:1468:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int8_t db::get_hostap_iface_id(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:1515:91: performance: Function parameter 'ssid' should be passed by const reference. [passedByValue]
bool db::add_vap(const std::string &radio_mac, int vap_id, std::string bssid, std::string ssid,
                                                                                          ^
controller/src/beerocks/master/db/db.cpp:1649:52: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_repeater_mode_flag(std::string mac)
                                                   ^
controller/src/beerocks/master/db/db.cpp:1662:52: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_repeater_mode_flag(std::string mac, bool flag)
                                                   ^
controller/src/beerocks/master/db/db.cpp:1676:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_iface_name(std::string mac, std::string iface_name)
                                           ^
controller/src/beerocks/master/db/db.cpp:1676:61: performance: Function parameter 'iface_name' should be passed by const reference. [passedByValue]
bool db::set_hostap_iface_name(std::string mac, std::string iface_name)
                                                            ^
controller/src/beerocks/master/db/db.cpp:1691:51: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_hostap_iface_name(std::string mac)
                                                  ^
controller/src/beerocks/master/db/db.cpp:1705:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_iface_type(std::string mac, beerocks::eIfaceType iface_type)
                                           ^
controller/src/beerocks/master/db/db.cpp:1719:60: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
beerocks::eIfaceType db::get_hostap_iface_type(std::string mac)
                                                           ^
controller/src/beerocks/master/db/db.cpp:1732:51: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_backhaul_iface_type(std::string mac, beerocks::eIfaceType iface_type)
                                                  ^
controller/src/beerocks/master/db/db.cpp:1748:48: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_driver_version(std::string mac, std::string version)
                                               ^
controller/src/beerocks/master/db/db.cpp:1748:65: performance: Function parameter 'version' should be passed by const reference. [passedByValue]
bool db::set_hostap_driver_version(std::string mac, std::string version)
                                                                ^
controller/src/beerocks/master/db/db.cpp:1763:55: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_hostap_driver_version(std::string mac)
                                                      ^
controller/src/beerocks/master/db/db.cpp:1777:67: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
beerocks::eIfaceType db::get_node_backhaul_iface_type(std::string mac)
                                                                  ^
controller/src/beerocks/master/db/db.cpp:1787:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::string db::get_5ghz_sibling_hostap(std::string mac)
                                                    ^
controller/src/beerocks/master/db/db.cpp:1816:66: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
beerocks::eApActiveMode db::get_hostap_activity_mode(std::string mac)
                                                                 ^
controller/src/beerocks/master/db/db.cpp:1828:42: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_radar_hit_stats(std::string mac, uint8_t channel, uint8_t bw, bool is_csa_entry)
                                         ^
controller/src/beerocks/master/db/db.cpp:1870:59: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_supported_channel_radar_affected(std::string mac, std::vector<uint8_t> channels,
                                                          ^
controller/src/beerocks/master/db/db.cpp:1910:40: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_is_dfs(std::string mac, bool enable)
                                       ^
controller/src/beerocks/master/db/db.cpp:1925:40: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_is_dfs(std::string mac)
                                       ^
controller/src/beerocks/master/db/db.cpp:1940:47: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_cac_completed(std::string mac, bool enable)
                                              ^
controller/src/beerocks/master/db/db.cpp:1955:47: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_cac_completed(std::string mac)
                                              ^
controller/src/beerocks/master/db/db.cpp:1969:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_is_on_fail_safe(std::string mac, bool enable)
                                                ^
controller/src/beerocks/master/db/db.cpp:1985:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_is_on_fail_safe(std::string mac)
                                                ^
controller/src/beerocks/master/db/db.cpp:2000:48: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_is_on_sub_band(std::string mac, bool enable)
                                               ^
controller/src/beerocks/master/db/db.cpp:2016:48: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_is_on_sub_band(std::string mac)
                                               ^
controller/src/beerocks/master/db/db.cpp:2031:48: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_on_dfs_reentry(std::string mac, bool enable)
                                               ^
controller/src/beerocks/master/db/db.cpp:2047:48: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_on_dfs_reentry(std::string mac)
                                               ^
controller/src/beerocks/master/db/db.cpp:2062:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_dfs_reentry_clients(std::string mac, std::set<std::string> dfs_reentry_clients)
                                                    ^
controller/src/beerocks/master/db/db.cpp:2062:80: performance: Function parameter 'dfs_reentry_clients' should be passed by const reference. [passedByValue]
bool db::set_hostap_dfs_reentry_clients(std::string mac, std::set<std::string> dfs_reentry_clients)
                                                                               ^
controller/src/beerocks/master/db/db.cpp:2076:30: performance: Function parameter 'dfs_reentry_client' should be passed by const reference. [passedByValue]
             [&](std::string dfs_reentry_client) {
                             ^
controller/src/beerocks/master/db/db.cpp:2082:70: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::set<std::string> db::get_hostap_dfs_reentry_clients(std::string mac)
                                                                     ^
controller/src/beerocks/master/db/db.cpp:2095:30: performance: Function parameter 'dfs_reentry_client' should be passed by const reference. [passedByValue]
             [&](std::string dfs_reentry_client) {
                             ^
controller/src/beerocks/master/db/db.cpp:2101:55: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::clear_hostap_dfs_reentry_clients(std::string mac)
                                                      ^
controller/src/beerocks/master/db/db.cpp:2117:48: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_is_acs_enabled(std::string mac, bool enable)
                                               ^
controller/src/beerocks/master/db/db.cpp:2133:48: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_is_acs_enabled(std::string mac)
                                               ^
controller/src/beerocks/master/db/db.cpp:2572:50: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
bool db::set_node_beacon_measurement(std::string sta_mac, std::string ap_mac, int8_t rcpi,
                                                 ^
controller/src/beerocks/master/db/db.cpp:2584:50: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
bool db::get_node_beacon_measurement(std::string sta_mac, std::string ap_mac, int8_t &rcpi,
                                                 ^
controller/src/beerocks/master/db/db.cpp:2597:45: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
bool db::set_node_cross_rx_rssi(std::string sta_mac, std::string ap_mac, int8_t rssi,
                                            ^
controller/src/beerocks/master/db/db.cpp:2608:45: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
bool db::get_node_cross_rx_rssi(std::string sta_mac, std::string ap_mac, int8_t &rssi,
                                            ^
controller/src/beerocks/master/db/db.cpp:2620:55: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_cross_rx_phy_rate_100kb(std::string mac, uint16_t rx_phy_rate_100kb)
                                                      ^
controller/src/beerocks/master/db/db.cpp:2630:55: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_cross_tx_phy_rate_100kb(std::string mac, uint16_t tx_phy_rate_100kb)
                                                      ^
controller/src/beerocks/master/db/db.cpp:2640:59: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint16_t db::get_node_cross_rx_phy_rate_100kb(std::string mac)
                                                          ^
controller/src/beerocks/master/db/db.cpp:2649:59: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint16_t db::get_node_cross_tx_phy_rate_100kb(std::string mac)
                                                          ^
controller/src/beerocks/master/db/db.cpp:2658:44: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
bool db::clear_node_cross_rssi(std::string sta_mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:2668:59: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_cross_estimated_tx_phy_rate(std::string mac, double phy_rate)
                                                          ^
controller/src/beerocks/master/db/db.cpp:2678:61: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
double db::get_node_cross_estimated_tx_phy_rate(std::string mac)
                                                            ^
controller/src/beerocks/master/db/db.cpp:2687:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_stats_info(std::string mac, beerocks_message::sApStatsParams *params)
                                           ^
controller/src/beerocks/master/db/db.cpp:2719:46: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
void db::clear_hostap_stats_info(std::string mac) { set_hostap_stats_info(mac, nullptr); }
                                             ^
controller/src/beerocks/master/db/db.cpp:2721:42: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_node_stats_info(std::string mac, beerocks_message::sStaStatsParams *params)
                                         ^
controller/src/beerocks/master/db/db.cpp:2747:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
void db::clear_node_stats_info(std::string mac) { set_node_stats_info(mac, nullptr); }
                                           ^
controller/src/beerocks/master/db/db.cpp:2749:59: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_hostap_stats_measurement_duration(std::string mac)
                                                          ^
controller/src/beerocks/master/db/db.cpp:2762:85: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::chrono::steady_clock::time_point db::get_node_stats_info_timestamp(std::string mac)
                                                                                    ^
controller/src/beerocks/master/db/db.cpp:2771:87: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::chrono::steady_clock::time_point db::get_hostap_stats_info_timestamp(std::string mac)
                                                                                      ^
controller/src/beerocks/master/db/db.cpp:2784:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint32_t db::get_node_rx_bytes(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:2793:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint32_t db::get_node_tx_bytes(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:2802:56: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint32_t db::get_hostap_total_sta_rx_bytes(std::string mac)
                                                       ^
controller/src/beerocks/master/db/db.cpp:2815:56: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint32_t db::get_hostap_total_sta_tx_bytes(std::string mac)
                                                       ^
controller/src/beerocks/master/db/db.cpp:2828:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
double db::get_node_rx_bitrate(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:2838:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
double db::get_node_tx_bitrate(std::string mac)
                                           ^
controller/src/beerocks/master/db/db.cpp:2848:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint16_t db::get_node_rx_phy_rate_100kb(std::string mac)
                                                    ^
controller/src/beerocks/master/db/db.cpp:2857:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint16_t db::get_node_tx_phy_rate_100kb(std::string mac)
                                                    ^
controller/src/beerocks/master/db/db.cpp:2866:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_hostap_channel_load_percent(std::string mac)
                                                    ^
controller/src/beerocks/master/db/db.cpp:2879:61: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_hostap_total_client_tx_load_percent(std::string mac)
                                                            ^
controller/src/beerocks/master/db/db.cpp:2892:61: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_hostap_total_client_rx_load_percent(std::string mac)
                                                            ^
controller/src/beerocks/master/db/db.cpp:2905:46: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_rx_load_percent(std::string mac)
                                             ^
controller/src/beerocks/master/db/db.cpp:2914:46: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_tx_load_percent(std::string mac)
                                             ^
controller/src/beerocks/master/db/db.cpp:2923:41: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
int8_t db::get_load_rx_rssi(std::string sta_mac)
                                        ^
controller/src/beerocks/master/db/db.cpp:2932:53: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
uint16_t db::get_load_rx_phy_rate_100kb(std::string sta_mac)
                                                    ^
controller/src/beerocks/master/db/db.cpp:2941:53: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
uint16_t db::get_load_tx_phy_rate_100kb(std::string sta_mac)
                                                    ^
controller/src/beerocks/master/db/db.cpp:2950:44: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_measurement_delay(std::string mac, int measurement_delay)
                                           ^
controller/src/beerocks/master/db/db.cpp:2962:43: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_measurement_delay(std::string mac)
                                          ^
controller/src/beerocks/master/db/db.cpp:2972:86: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
std::chrono::steady_clock::time_point db::get_measurement_sent_timestamp(std::string mac)
                                                                                     ^
controller/src/beerocks/master/db/db.cpp:2982:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_measurement_sent_timestamp(std::string mac)
                                                    ^
controller/src/beerocks/master/db/db.cpp:2993:48: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_measurement_recv_delta(std::string mac)
                                               ^
controller/src/beerocks/master/db/db.cpp:3005:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_measurement_recv_delta(std::string mac)
                                                ^
controller/src/beerocks/master/db/db.cpp:3019:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_measurement_window_size(std::string mac)
                                                ^
controller/src/beerocks/master/db/db.cpp:3028:50: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_measurement_window_size(std::string mac, int window_size)
                                                 ^
controller/src/beerocks/master/db/db.cpp:3038:60: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_exclude_from_steering_flag(std::string mac)
                                                           ^
controller/src/beerocks/master/db/db.cpp:3050:60: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::set_hostap_exclude_from_steering_flag(std::string mac, bool flag)
                                                           ^
controller/src/beerocks/master/db/db.cpp:3118:54: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
beerocks::eWiFiBandwidth db::get_node_bw(std::string mac)
                                                     ^
controller/src/beerocks/master/db/db.cpp:3128:59: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::get_node_channel_ext_above_secondary(std::string mac)
                                                          ^
controller/src/beerocks/master/db/db.cpp:3138:59: performance: Function parameter 'hostap_mac' should be passed by const reference. [passedByValue]
bool db::get_hostap_channel_ext_above_primary(std::string hostap_mac)
                                                          ^
controller/src/beerocks/master/db/db.cpp:3151:37: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_node_bw_int(std::string mac)
                                    ^
controller/src/beerocks/master/db/db.cpp:3171:58: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
uint16_t db::get_hostap_vht_center_frequency(std::string mac)
                                                         ^
controller/src/beerocks/master/db/db.cpp:3187:58: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::assign_association_handling_task_id(std::string mac, int new_task_id)
                                                         ^
controller/src/beerocks/master/db/db.cpp:3198:54: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_association_handling_task_id(std::string mac)
                                                     ^
controller/src/beerocks/master/db/db.cpp:3208:46: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::assign_steering_task_id(std::string mac, int new_task_id)
                                             ^
controller/src/beerocks/master/db/db.cpp:3219:42: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_steering_task_id(std::string mac)
                                         ^
controller/src/beerocks/master/db/db.cpp:3229:45: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::assign_roaming_task_id(std::string mac, int new_task_id)
                                            ^
controller/src/beerocks/master/db/db.cpp:3240:41: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_roaming_task_id(std::string mac)
                                        ^
controller/src/beerocks/master/db/db.cpp:3250:51: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::assign_load_balancer_task_id(std::string mac, int new_task_id)
                                                  ^
controller/src/beerocks/master/db/db.cpp:3261:47: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_load_balancer_task_id(std::string mac)
                                              ^
controller/src/beerocks/master/db/db.cpp:3271:53: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::assign_client_locating_task_id(std::string mac, int new_task_id, bool new_connection)
                                                    ^
controller/src/beerocks/master/db/db.cpp:3286:49: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_client_locating_task_id(std::string mac, bool new_connection)
                                                ^
controller/src/beerocks/master/db/db.cpp:3299:63: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
bool db::assign_ire_4addr_mode_transition_task_id(std::string mac, int new_task_id)
                                                              ^
controller/src/beerocks/master/db/db.cpp:3310:59: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
int db::get_ire_4addr_mode_transition_task_id(std::string mac)
                                                          ^
controller/src/beerocks/master/db/db.cpp:3605:48: style: Parameter 'n' can be declared with const [constParameter]
int db::get_node_bw_int(std::shared_ptr<node> &n)
                                               ^
controller/src/beerocks/master/db/db.cpp:718:66: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
            get_node_state(hostap) == beerocks::STATE_CONNECTED) {
                                                                 ^
controller/src/beerocks/master/db/db.cpp:1030:27: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
        neighbors_al_macs.push_back(network_utils::mac_from_string(sibling));
                          ^
controller/src/beerocks/master/db/db.cpp:1563:35: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
        if (it.second.mac == mac) {
                                  ^
controller/src/beerocks/master/db/db.cpp:1642:35: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
        if (it.second.mac == mac) {
                                  ^
controller/src/beerocks/master/db/db.cpp:2491:35: style: Variable '(*it).map_updates' is assigned a value that is never used. [unreadVariable]
                (*it).map_updates = update_enable;
                                  ^
controller/src/beerocks/master/db/db.cpp:2516:37: style: Variable '(*it).stats_updates' is assigned a value that is never used. [unreadVariable]
                (*it).stats_updates = update_enable;
                                    ^
controller/src/beerocks/master/db/db.cpp:2541:38: style: Variable '(*it).events_updates' is assigned a value that is never used. [unreadVariable]
                (*it).events_updates = update_enable;
                                     ^
controller/src/beerocks/master/db/node.cpp:17:53: performance: Function parameter 'mac_' should be passed by const reference. [passedByValue]
node::node(beerocks::eType type_, const std::string mac_)
                                                    ^
controller/src/beerocks/master/db/network_map.cpp:162:84: style: Parameter 'buffer_size' can be declared with const [constParameter]
                                               uint8_t *tx_buffer, std::ptrdiff_t &buffer_size,
                                                                                   ^
controller/src/beerocks/master/db/network_map.cpp:498:19: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
    event->data = GET_MESSAGE_POINTER(BML_EVENT_BSS_TM_REQ, response->buffer(0), size);
                  ^
controller/src/beerocks/master/db/network_map.cpp:532:19: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
    event->data = GET_MESSAGE_POINTER(BML_EVENT_BH_ROAM_REQ, response->buffer(0), size);
                  ^
controller/src/beerocks/master/db/network_map.cpp:566:19: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
    event->data = GET_MESSAGE_POINTER(BML_EVENT_CLIENT_ALLOW_REQ, response->buffer(0), size);
                  ^
controller/src/beerocks/master/db/network_map.cpp:599:19: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
    event->data = GET_MESSAGE_POINTER(BML_EVENT_CLIENT_DISALLOW_REQ, response->buffer(0), size);
                  ^
controller/src/beerocks/master/db/network_map.cpp:633:19: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
    event->data = GET_MESSAGE_POINTER(BML_EVENT_ACS_START, response->buffer(0), size);
                  ^
controller/src/beerocks/master/db/network_map.cpp:667:19: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
    event->data = GET_MESSAGE_POINTER(BML_EVENT_CSA_NOTIFICATION, response->buffer(0), size);
                  ^
controller/src/beerocks/master/db/network_map.cpp:705:9: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
        GET_MESSAGE_POINTER(BML_EVENT_CAC_STATUS_CHANGED_NOTIFICATION, response->buffer(0), size);
        ^
controller/src/beerocks/master/son_actions.cpp:276:9: style: The scope of the variable 'prev_task_id' can be reduced. [variableScope]
    int prev_task_id;
        ^
controller/src/beerocks/master/son_actions.cpp:303:13: style: Local variable 'prev_task_id' shadows outer variable [shadowVariable]
        int prev_task_id = database.get_association_handling_task_id(mac);
            ^
controller/src/beerocks/master/son_actions.cpp:425:66: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
                                                     std::string sta_mac, std::string bssid)
                                                                 ^
controller/src/beerocks/master/son_actions.cpp:425:87: performance: Function parameter 'bssid' should be passed by const reference. [passedByValue]
                                                     std::string sta_mac, std::string bssid)
                                                                                      ^
controller/src/beerocks/master/son_actions.cpp:451:76: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
            if (operating_class == operating_class_info.operating_class()) {
                                                                           ^
controller/src/beerocks/master/tasks/association_handling_task.cpp:37:85: performance: Function parameter 'sta_mac_' should be passed by const reference. [passedByValue]
                                                     task_pool &tasks_, std::string sta_mac_,
                                                                                    ^
controller/src/beerocks/master/tasks/association_handling_task.cpp:38:66: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]
                                                     std::string task_name_)
                                                                 ^
controller/src/beerocks/master/son_master_thread.cpp:1309:36: style: Redundant initialization for 'interface'. The initialized value is overwritten before it is read. [redundantInitialization]
                    auto interface = std::get<1>(interface_tuple);
                                   ^
controller/src/beerocks/master/son_master_thread.cpp:1334:36: style: Redundant initialization for 'interface'. The initialized value is overwritten before it is read. [redundantInitialization]
                    auto interface = std::get<1>(interface_tuple);
                                   ^
controller/src/beerocks/master/son_master_thread.cpp:1204:10: style: The scope of the variable 'old_link_metrics_removed' can be reduced. [variableScope]
    bool old_link_metrics_removed = false;
         ^
controller/src/beerocks/master/son_master_thread.cpp:1129:10: style: Parameter 'link_metric_data' can be declared with const [constParameter]
        &link_metric_data)
         ^
controller/src/beerocks/master/son_master_thread.cpp:1160:79: style: Parameter 'ap_metric_data' can be declared with const [constParameter]
print_ap_metric_map(std::unordered_map<sMacAddr, son::node::ap_metrics_data> &ap_metric_data)
                                                                              ^
controller/src/beerocks/master/son_master_thread.cpp:1341:11: style: Variable 'ap_metric_data' can be declared with const [constVariable]
    auto &ap_metric_data = database.get_ap_metric_data_map();
          ^
controller/src/beerocks/master/son_master_thread.cpp:2286:14: style: Parameter 'm1' can be declared with const [constParameter]
    WSC::m1 &m1, std::string bridge_mac, std::string radio_mac, ieee1905_1::CmduMessageTx &cmdu_tx)
             ^
controller/src/beerocks/master/son_master_thread.cpp:1221:38: style: Variable 'old_link_metrics_removed' is assigned a value that is never used. [unreadVariable]
            old_link_metrics_removed = true;
                                     ^
controller/src/beerocks/master/tasks/bml_task.cpp:76:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (connection_change_event *)obj;
                             ^
controller/src/beerocks/master/tasks/bml_task.cpp:90:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (stats_info_available_event *)obj;
                             ^
controller/src/beerocks/master/tasks/bml_task.cpp:198:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/bml_task.cpp:210:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/bml_task.cpp:224:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/bml_task.cpp:236:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/bml_task.cpp:250:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/bml_task.cpp:262:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/bml_task.cpp:92:17: style: Local variable 'idx' shadows outer variable [shadowVariable]
            int idx = 0;
                ^
controller/src/beerocks/master/tasks/bml_task.cpp:94:21: style: Local variable 'sd' shadows outer variable [shadowVariable]
            Socket *sd;
                    ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:99:38: style: C-style pointer casting [cstyleCast]
                acs_response_event = (sAcsResponse_event *)obj;
                                     ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:107:32: style: C-style pointer casting [cstyleCast]
                csa_event    = (sCsa_event *)obj;
                               ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:120:53: style: C-style pointer casting [cstyleCast]
                restricted_channel_response_event = (sRestrictedChannelResponse_event *)obj;
                                                    ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:124:53: style: C-style pointer casting [cstyleCast]
                restricted_channel_response_event = (sRestrictedChannelResponse_event *)obj;
                                                    ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:229:38: style: C-style pointer casting [cstyleCast]
                slave_joined_event = (sSlaveJoined_event *)event_obj;
                                     ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:234:29: style: C-style pointer casting [cstyleCast]
                csa_event = (sCsa_event *)event_obj;
                            ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:239:48: style: C-style pointer casting [cstyleCast]
                hostap_channel_request_event = (sHostapChannelRequest_event *)event_obj;
                                               ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:249:36: style: C-style pointer casting [cstyleCast]
                ap_activity_idle = (sApActivityIdle_event *)event_obj;
                                   ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:259:21: style: C-style pointer casting [cstyleCast]
                    (sDfsReEntrySampleSteeredClients_event *)event_obj;
                    ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:276:42: style: C-style pointer casting [cstyleCast]
                dfs_cac_pending_hostap = (sDfsCacPendinghostap_event *)event_obj;
                                         ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:293:43: style: C-style pointer casting [cstyleCast]
                    cac_completed_event = (sCacCompleted_event *)event_obj;
                                          ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:304:41: style: C-style pointer casting [cstyleCast]
                dfs_channel_available = (sDfsChannelAvailable_event *)event_obj;
                                        ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:310:50: style: C-style pointer casting [cstyleCast]
                configured_restricted_channels = (sConfiguredRestrictedChannels_event *)event_obj;
                                                 ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1054:26: style: C-style pointer casting [cstyleCast]
        auto new_event = CHANNEL_SELECTION_ALLOCATE_EVENT(sDfsReEntrySampleSteeredClients_event);
                         ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1172:26: style: C-style pointer casting [cstyleCast]
        auto new_event = CHANNEL_SELECTION_ALLOCATE_EVENT(sDfsReEntrySampleSteeredClients_event);
                         ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1208:37: style: C-style pointer casting [cstyleCast]
            auto new_event        = CHANNEL_SELECTION_ALLOCATE_EVENT(sDfsCacPendinghostap_event);
                                    ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1853:34: style: C-style pointer casting [cstyleCast]
    auto new_event             = CHANNEL_SELECTION_ALLOCATE_EVENT(sDfsCacPendinghostap_event);
                                 ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:397:33: style: Redundant initialization for 'hostap_parent_type'. The initialized value is overwritten before it is read. [redundantInitialization]
        auto hostap_parent_type = database.get_node_type(hostap_parent_mac);
                                ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1804:10: style: The scope of the variable 'channel_80Mhz_step' can be reduced. [variableScope]
    auto channel_80Mhz_step = CHANNEL_80MHZ_STEP;
         ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1140:58: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
void channel_selection_task::queue_clear_mac(std::string mac)
                                                         ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1167:34: performance: Function parameter 'set_reentry_client' should be passed by const reference. [passedByValue]
                 [&](std::string set_reentry_client) {
                                 ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1701:63: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
            if (database.is_hostap_backhaul_manager(sibling)) {
                                                              ^
controller/src/beerocks/master/tasks/channel_selection_task.cpp:1790:46: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
        if (database.is_node_5ghz(gw_slave)) {
                                             ^
controller/src/beerocks/master/tasks/client_steering_task.cpp:25:75: performance: Function parameter 'sta_mac_' should be passed by const reference. [passedByValue]
                                           task_pool &tasks_, std::string sta_mac_,
                                                                          ^
controller/src/beerocks/master/tasks/client_steering_task.cpp:26:56: performance: Function parameter 'target_bssid_' should be passed by const reference. [passedByValue]
                                           std::string target_bssid_, bool disassoc_imminent_,
                                                       ^
controller/src/beerocks/master/tasks/client_steering_task.cpp:28:56: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]
                                           std::string task_name_)
                                                       ^
controller/src/beerocks/master/tasks/client_locating_task.cpp:21:75: performance: Function parameter 'client_mac_' should be passed by const reference. [passedByValue]
                                           task_pool &tasks_, std::string client_mac_,
                                                                          ^
controller/src/beerocks/master/tasks/client_locating_task.cpp:23:56: performance: Function parameter 'eth_switch_' should be passed by const reference. [passedByValue]
                                           std::string eth_switch_, std::string task_name_)
                                                       ^
controller/src/beerocks/master/tasks/client_locating_task.cpp:23:81: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]
                                           std::string eth_switch_, std::string task_name_)
                                                                                ^
controller/src/beerocks/master/son_management.cpp:1956:28: style: Variable 'result_status' is assigned a value that is never used. [unreadVariable]
        auto result_status = eChannelScanErrCode::CHANNEL_SCAN_SUCCESS;
                           ^
controller/src/beerocks/master/son_management.cpp:1957:28: style: Variable 'op_error_code' is assigned a value that is never used. [unreadVariable]
        auto op_error_code = eChannelScanOpErrCode::CHANNEL_SCAN_OP_SUCCESS;
                           ^
controller/src/beerocks/master/son_management.cpp:1963:27: style: Variable 'op_error_code' is assigned a value that is never used. [unreadVariable]
            op_error_code = eChannelScanOpErrCode::CHANNEL_SCAN_OP_SCAN_IN_PROGRESS;
                          ^
controller/src/beerocks/master/son_management.cpp:1970:27: style: Variable 'result_status' is assigned a value that is never used. [unreadVariable]
            result_status = last_scan_success;
                          ^
controller/src/beerocks/master/tasks/ire_network_optimization_task.cpp:27:74: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]
                                                             std::string task_name_)
                                                                         ^
controller/src/beerocks/master/tasks/dynamic_channel_selection_task.cpp:141:18: style: Redundant initialization for 'ret'. The initialized value is overwritten before it is read. [redundantInitialization]
        auto ret = beerocks::eChannelScanErrCode::CHANNEL_SCAN_SUCCESS;
                 ^
controller/src/beerocks/master/tasks/load_balancer_task.cpp:189:41: style: Variable 'client_efficiency_ratio' is reassigned a value before the old one has been used. [redundantAssignment]
                client_efficiency_ratio =
                                        ^
controller/src/beerocks/master/tasks/load_balancer_task.cpp:285:13: style: The scope of the variable 'chosen_hostap_bytes_per_second_gained' can be reduced. [variableScope]
        int chosen_hostap_bytes_per_second_gained = INT32_MIN;
            ^
controller/src/beerocks/master/tasks/load_balancer_task.cpp:27:71: performance: Function parameter 'ire_mac_' should be passed by const reference. [passedByValue]
                                       task_pool &tasks_, std::string ire_mac_,
                                                                      ^
controller/src/beerocks/master/tasks/load_balancer_task.cpp:28:52: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]
                                       std::string task_name_)
                                                   ^
controller/src/beerocks/master/tasks/network_health_check_task.cpp:23:66: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]
                                                     std::string task_name_)
                                                                 ^
controller/src/beerocks/master/tasks/network_health_check_task.cpp:200:17: style: Redundant checking of STL container element existence before removing it. [redundantIfRemove]
            if (suspected_dis_clients.find(pending_node) != suspected_dis_clients.end()) {
                ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:442:25: style: The scope of the variable 'dl_snr' can be reduced. [variableScope]
                uint8_t dl_snr;
                        ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:525:25: style: The scope of the variable 'dl_snr' can be reduced. [variableScope]
                uint8_t dl_snr;
                        ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:655:14: style: The scope of the variable 'found_band_match' can be reduced. [variableScope]
        bool found_band_match;
             ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:910:19: style: Local variable 'it' shadows outer variable [shadowVariable]
        for (auto it : hostap_candidates) {
                  ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:42:69: performance: Function parameter 'sta_mac_' should be passed by const reference. [passedByValue]
                                     task_pool &tasks_, std::string sta_mac_,
                                                                    ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:43:74: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]
                                     int starting_delay_ms_, std::string task_name_)
                                                                         ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:1375:75: performance: Function parameter 'temp_cross_hostaps' should be passed by const reference. [passedByValue]
bool optimal_path_task::calculate_measurement_delay(std::set<std::string> temp_cross_hostaps,
                                                                          ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:1376:65: performance: Function parameter 'current_hostap' should be passed by const reference. [passedByValue]
                                                    std::string current_hostap, std::string sta_mac)
                                                                ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:1376:93: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
                                                    std::string current_hostap, std::string sta_mac)
                                                                                            ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:1389:74: performance: Function parameter 'temp_cross_hostaps' should be passed by const reference. [passedByValue]
bool optimal_path_task::ready_to_pick_optimal_path(std::set<std::string> temp_cross_hostaps,
                                                                         ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:1390:64: performance: Function parameter 'current_hostap' should be passed by const reference. [passedByValue]
                                                   std::string current_hostap, std::string sta_mac)
                                                               ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:1390:92: performance: Function parameter 'sta_mac' should be passed by const reference. [passedByValue]
                                                   std::string current_hostap, std::string sta_mac)
                                                                                           ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:1641:67: performance: Function parameter 'hostap_mac' should be passed by const reference. [passedByValue]
                                                      std::string hostap_mac)
                                                                  ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:1672:28: style: Variable 'parent_mac' is assigned a value that is never used. [unreadVariable]
    std::string parent_mac = database.get_node_parent(node_mac);
                           ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:315:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                    potential_ap_iter++;
                    ^
controller/src/beerocks/master/tasks/optimal_path_task.cpp:321:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                potential_ap_iter++;
                ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task_db.h:67:13: performance: Variable 'bssid' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
            bssid                   = beerocks::net::network_utils::mac_to_string(config_.bssid);
            ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:74:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:88:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:266:38: style: C-style pointer casting [cstyleCast]
            auto event_obj         = (steering_client_disconnect_request_event *)obj;
                                     ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:300:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (steering_rssi_measurement_request_event *)obj;
                             ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:379:30: style: C-style pointer casting [cstyleCast]
            auto event_obj = (listener_general_register_unregister_event *)obj;
                             ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:824:26: style: C-style pointer casting [cstyleCast]
        auto event_obj = (steering_slave_join_event *)obj;
                         ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task_db.cpp:156:88: style: Parameter 'bssid' can be declared with const [constParameter]
int32_t rdkb_wlan_task_db::get_group_index(const std::string &client_mac, std::string &bssid)
                                                                                       ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:843:10: style: The scope of the variable 'listener_exist' can be reduced. [variableScope]
    bool listener_exist;
         ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:965:18: style: Local variable 'update' shadows outer variable [shadowVariable]
            auto update = message_com::create_vs_message<
                 ^
controller/src/beerocks/master/tasks/rdkb/rdkb_wlan_task.cpp:894:38: style: Variable '(*it).events_updates' is assigned a value that is never used. [unreadVariable]
                (*it).events_updates = update_enable;
                                     ^
controller/src/beerocks/master/tasks/task.cpp:19:24: performance: Function parameter 'task_name_' should be passed by const reference. [passedByValue]
task::task(std::string task_name_, std::string node_mac)
                       ^
controller/src/beerocks/master/tasks/task.cpp:19:48: performance: Function parameter 'node_mac' should be passed by const reference. [passedByValue]
task::task(std::string task_name_, std::string node_mac)
                                               ^
controller/src/beerocks/master/tasks/task.cpp:182:40: performance: Function parameter 'mac' should be passed by const reference. [passedByValue]
void task::add_pending_mac(std::string mac, beerocks_message::eActionOp_CONTROL action_op)
                                       ^
framework/common/broker_interface.cpp:67:41: style: Parameter 'msg' can be declared with const [constParameter]
void BrokerInterface::SyncSend(Message &msg)
                                        ^
framework/common/encryption.cpp:432:21: style: struct member 'Anonymous1::emsk' is never used. [unusedStructMember]
            uint8_t emsk[32];
                    ^
framework/common/encryption.cpp:449:22: style: Variable 'kdf_key_length.i' is assigned a value that is never used. [unreadVariable]
    kdf_key_length.i = htonl(sizeof(keys.keys) * 8);
                     ^
framework/common/encryption.cpp:453:20: style: Variable 'kdf_iter.i' is assigned a value that is never used. [unreadVariable]
        kdf_iter.i = htonl(iter);
                   ^
framework/common/logger.cpp:94:9: style: Condition '!init_performed' is always true [knownConditionTrueFalse]
    if (!init_performed) {
        ^
framework/common/logger.cpp:163:81: performance: Function parameter 'logger_name' should be passed by const reference. [passedByValue]
void Logger::Config::SetValuesFromJson(struct json_object *jlogger, std::string logger_name)
                                                                                ^
framework/common/logger.cpp:33:18: style: The scope of the variable 'length' can be reduced. [variableScope]
    int fd = -1, length = -1, i = 0, ret = 0;
                 ^
framework/common/logger.cpp:33:25: style: Variable 'length' is assigned a value that is never used. [unreadVariable]
    int fd = -1, length = -1, i = 0, ret = 0;
                        ^
framework/common/nng/socket.cpp:198:41: style: Parameter 'frame' can be declared with const [constParameter]
bool SubSocket::Receive(Message::Frame &frame, int flags)
                                        ^
framework/common/nng/socket.cpp:100:18: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
        totalLen += frame.len();
                 ^
framework/common/test/encryption_test.cpp:15:56: performance: Function parameter 'message' should be passed by const reference. [passedByValue]
static bool check(int &errors, bool check, std::string message)
                                                       ^
framework/common/test/encryption_test.cpp:42:20: style: Variable 'key1_length' is assigned a value that is never used. [unreadVariable]
    key1_length    = sizeof(key1);
                   ^
framework/common/test/message_test.cpp:124:30: style: Local variable 'f1' shadows outer variable [shadowVariable]
        mapf::Message::Frame f1;
                             ^
framework/common/test/poller_test.cpp:81:12: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
        rc = poller_.Remove(sub_);
           ^
framework/common/test/poller_test.cpp:42:47: style: The scope of the variable 'rc' can be reduced. [variableScope]
        int attempts = 0, max_attempts = 100, rc;
                                              ^
framework/common/test/socket_test.cpp:309:48: style: Parameter 'cfg' can be declared with const [constParameter]
int start_broker(SocketTest::SocketTestConfig &cfg)
                                               ^
framework/common/test/socket_test.cpp:180:24: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                frames += f.str() + ", ";
                       ^
framework/common/zmq/socket.cpp:217:41: style: Parameter 'frame' can be declared with const [constParameter]
bool SubSocket::Receive(Message::Frame &frame, int flags)
                                        ^
framework/external/easylogging/easylogging++.cc:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
framework/platform/bpl/common/utils/utils.cpp:29:42: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]
void ltrim(std::string &str, std::string additional_chars)
                                         ^
framework/platform/bpl/common/utils/utils.cpp:34:42: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]
void rtrim(std::string &str, std::string additional_chars)
                                         ^
framework/platform/bpl/common/utils/utils.cpp:39:41: performance: Function parameter 'additional_chars' should be passed by const reference. [passedByValue]
void trim(std::string &str, std::string additional_chars)
                                        ^
framework/platform/bpl/common/utils/utils.cpp:64:17: style: Unused variable: return_string [unusedVariable]
    std::string return_string;
                ^
framework/platform/bpl/linux/bpl_cfg.cpp:37:0: information: Skipping configuration 'PLATFORM_DB_PATH' since the value of 'PLATFORM_DB_PATH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        in_conf_file.open(PLATFORM_DB_PATH);
^
framework/platform/bpl/linux/bpl_cfg.cpp:39:0: information: Skipping configuration 'PLATFORM_DB_PATH' since the value of 'PLATFORM_DB_PATH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            MAPF_ERR("Failed oppening file " << PLATFORM_DB_PATH);
^
framework/platform/bpl/test/bpl_test.cpp:36:9: portability: fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems. [fflushOnInputStream]
        fflush(stdin);
        ^
framework/platform/bpl/test/bpl_test.cpp:42:13: portability: fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems. [fflushOnInputStream]
            fflush(stdin);
            ^
framework/platform/bpl/uci/arp/bpl_arp.cpp:66:28: style: C-style pointer casting [cstyleCast]
    arp_monitor *pArpMon = (arp_monitor *)ctx;
                           ^
framework/platform/bpl/uci/arp/bpl_arp.cpp:85:28: style: C-style pointer casting [cstyleCast]
    arp_monitor *pArpMon = (arp_monitor *)ctx;
                           ^
framework/platform/bpl/uci/arp/bpl_arp.cpp:97:28: style: C-style pointer casting [cstyleCast]
    arp_monitor *pArpMon = (arp_monitor *)ctx;
                           ^
framework/platform/bpl/uci/arp/bpl_arp.cpp:110:28: style: C-style pointer casting [cstyleCast]
    arp_monitor *pArpMon = (arp_monitor *)ctx;
                           ^
framework/platform/bpl/uci/arp/bpl_arp.cpp:125:28: style: C-style pointer casting [cstyleCast]
    arp_monitor *pArpMon = (arp_monitor *)ctx;
                           ^
framework/platform/bpl/uci/arp/bpl_arp.cpp:138:28: style: C-style pointer casting [cstyleCast]
    arp_monitor *pArpMon = (arp_monitor *)ctx;
                           ^
framework/platform/bpl/uci/arp/bpl_arp.cpp:151:28: style: C-style pointer casting [cstyleCast]
    arp_monitor *pArpMon = (arp_monitor *)ctx;
                           ^
framework/platform/bpl/uci/arp/bpl_arp.cpp:165:28: style: C-style pointer casting [cstyleCast]
    arp_monitor *pArpMon = (arp_monitor *)ctx;
                           ^
framework/platform/bpl/uci/cfg/bpl_cfg.cpp:265:9: style: The scope of the variable 'retVal' can be reduced. [variableScope]
    int retVal = 0;
        ^
framework/platform/bpl/uci/cfg/bpl_cfg.cpp:265:16: style: Variable 'retVal' is assigned a value that is never used. [unreadVariable]
    int retVal = 0;
               ^
framework/platform/bpl/uci/arp/monitor/arp_monitor.cpp:391:24: style: The scope of the variable 'type' can be reduced. [variableScope]
        unsigned short type;
                       ^
framework/platform/bpl/uci/arp/monitor/arp_monitor.cpp:211:36: performance: Function parameter 'strIface' should be passed by const reference. [passedByValue]
int arp_monitor::start(std::string strIface)
                                   ^
framework/platform/bpl/uci/arp/monitor/arp_monitor.cpp:407:21: style: Unused variable: ipv4_str [unusedVariable]
        std::string ipv4_str;
                    ^
framework/platform/bpl/uci/dhcp/bpl_dhcp.cpp:41:10: style: struct member 'dhcp_event_request::data' is never used. [unusedStructMember]
    char data[];
         ^
framework/platform/bpl/uci/cfg/bpl_cfg_uci.cpp:319:13: style: The scope of the variable 'scanf_res' can be reduced. [variableScope]
        int scanf_res;
            ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/cCmduHeader.cpp:133:15: style: C-style pointer casting [cstyleCast]
    m_flags = (sFlags*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvAlMacAddressType.cpp:109:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlv1905NeighborDevice.cpp:161:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlv1905NeighborDevice.cpp:149:28: style: C-style pointer casting [cstyleCast]
    m_mac_al_1905_device = (sMacAl1905Device*)m_buff_ptr__;
                           ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvAutoconfigFreqBand.cpp:108:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvAutoconfigFreqBand.cpp:101:15: style: C-style pointer casting [cstyleCast]
    m_value = (eValue*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvDeviceBridgingCapability.cpp:194:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvEndOfMessage.cpp:96:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvDeviceInformation.cpp:207:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvLinkMetricResultCode.cpp:108:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvLinkMetricResultCode.cpp:101:15: style: C-style pointer casting [cstyleCast]
    m_value = (eValue*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvLinkMetricQuery.cpp:120:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvLinkMetricQuery.cpp:244:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvMacAddress.cpp:109:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/WSC/WSC_Attributes.cpp:489:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvNon1905neighborDeviceList.cpp:161:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvPushButtonEventNotification.cpp:157:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvPushButtonEventNotification.cpp:149:25: style: C-style pointer casting [cstyleCast]
    m_media_type_list = (sMediaType*)m_buff_ptr__;
                        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvPushButtonJoinNotification.cpp:147:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvReceiverLinkMetric.cpp:174:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvReceiverLinkMetric.cpp:162:29: style: C-style pointer casting [cstyleCast]
    m_interface_pair_info = (sInterfacePairInfo*)m_buff_ptr__;
                            ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSearchedRole.cpp:108:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSearchedRole.cpp:101:15: style: C-style pointer casting [cstyleCast]
    m_value = (eValue*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSupportedFreqBand.cpp:108:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSupportedFreqBand.cpp:101:15: style: C-style pointer casting [cstyleCast]
    m_value = (eValue*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSupportedRole.cpp:108:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvSupportedRole.cpp:101:15: style: C-style pointer casting [cstyleCast]
    m_value = (eValue*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvTransmitterLinkMetric.cpp:174:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvTransmitterLinkMetric.cpp:162:29: style: C-style pointer casting [cstyleCast]
    m_interface_pair_info = (sInterfacePairInfo*)m_buff_ptr__;
                            ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvVendorSpecific.cpp:163:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/ieee_1905_1/tlvWsc.cpp:150:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApCapability.cpp:109:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApCapability.cpp:101:15: style: C-style pointer casting [cstyleCast]
    m_value = (sValue*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHeCapabilities.cpp:200:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHeCapabilities.cpp:185:16: style: C-style pointer casting [cstyleCast]
    m_flags1 = (sFlags1*)m_buff_ptr__;
               ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHeCapabilities.cpp:192:16: style: C-style pointer casting [cstyleCast]
    m_flags2 = (sFlags2*)m_buff_ptr__;
               ^
framework/tlvf/AutoGenerated/include/tlvf/test/tlvVarList.h:51:14: style: The function 'isPostInitSucceeded' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
        bool isPostInitSucceeded();
             ^
framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp:626:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp:851:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp:551:22: style: C-style pointer casting [cstyleCast]
    m_complex_list = (cInner*)m_buff_ptr__;
                     ^
framework/tlvf/AutoGenerated/src/tlvf/test/tlvVarList.cpp:601:29: style: C-style pointer casting [cstyleCast]
    m_unknown_length_list = (cInner*)m_buff_ptr__;
                            ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHtCapabilities.cpp:122:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApHtCapabilities.cpp:114:15: style: C-style pointer casting [cstyleCast]
    m_flags = (sFalgs*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApMetricQuery.cpp:157:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApMetric.cpp:199:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApMetric.cpp:180:38: style: C-style pointer casting [cstyleCast]
    m_estimated_service_parameters = (sEstimatedService*)m_buff_ptr__;
                                     ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApOperationalBSS.cpp:194:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApRadioBasicCapabilities.cpp:218:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApRadioIdentifier.cpp:109:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApVhtCapabilities.cpp:159:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApVhtCapabilities.cpp:144:16: style: C-style pointer casting [cstyleCast]
    m_flags1 = (sFlags1*)m_buff_ptr__;
               ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvApVhtCapabilities.cpp:151:16: style: C-style pointer casting [cstyleCast]
    m_flags2 = (sFlags2*)m_buff_ptr__;
               ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvAssociatedClients.cpp:194:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvChannelPreference.cpp:207:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvChannelPreference.cpp:347:15: style: C-style pointer casting [cstyleCast]
    m_flags = (sFlags*)m_buff_ptr__;
              ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvChannelSelectionResponse.cpp:121:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvChannelSelectionResponse.cpp:114:23: style: C-style pointer casting [cstyleCast]
    m_response_code = (eResponseCode*)m_buff_ptr__;
                      ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientAssociationControlRequest.cpp:195:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientAssociationControlRequest.cpp:167:29: style: C-style pointer casting [cstyleCast]
    m_association_control = (eAssociationControl*)m_buff_ptr__;
                            ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientAssociationEvent.cpp:134:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientAssociationEvent.cpp:127:27: style: C-style pointer casting [cstyleCast]
    m_association_event = (eAssociationEvent*)m_buff_ptr__;
                          ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientCapabilityReport.cpp:171:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientCapabilityReport.cpp:150:21: style: C-style pointer casting [cstyleCast]
    m_result_code = (eResultCode*)m_buff_ptr__;
                    ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvClientInfo.cpp:122:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvErrorCode.cpp:121:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvErrorCode.cpp:107:21: style: C-style pointer casting [cstyleCast]
    m_reason_code = (eReasonCode*)m_buff_ptr__;
                    ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvHigherLayerData.cpp:162:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvHigherLayerData.cpp:144:18: style: C-style pointer casting [cstyleCast]
    m_protocol = (eProtocol*)m_buff_ptr__;
                 ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvOperatingChannelReport.cpp:182:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvOperatingChannelReport.cpp:168:32: style: C-style pointer casting [cstyleCast]
    m_operating_classes_list = (sOperatingClasses*)m_buff_ptr__;
                               ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSearchedService.cpp:151:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSearchedService.cpp:143:31: style: C-style pointer casting [cstyleCast]
    m_searched_service_list = (eSearchedService*)m_buff_ptr__;
                              ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSearchedService.cpp:146:56: style: Argument 'sizeof(eSearchedService)*(searched_service_list_length)' to function buffPtrIncrementSafe is always 0 [constArgument]
    if (!buffPtrIncrementSafe(sizeof(eSearchedService) * (searched_service_list_length))) {
                                                       ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvRadioOperationRestriction.cpp:207:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvRadioOperationRestriction.cpp:331:22: style: C-style pointer casting [cstyleCast]
    m_channel_list = (sChannelInfo*)m_buff_ptr__;
                     ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSteeringBTMReport.cpp:146:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSteeringRequest.cpp:269:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSupportedService.cpp:151:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSupportedService.cpp:143:32: style: C-style pointer casting [cstyleCast]
    m_supported_service_list = (eSupportedService*)m_buff_ptr__;
                               ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSteeringRequest.cpp:222:23: style: C-style pointer casting [cstyleCast]
    m_request_flags = (sRequestFlags*)m_buff_ptr__;
                      ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSteeringRequest.cpp:261:27: style: C-style pointer casting [cstyleCast]
    m_target_bssid_list = (sTargetBssidInfo*)m_buff_ptr__;
                          ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvSupportedService.cpp:146:57: style: Argument 'sizeof(eSupportedService)*(supported_service_list_length)' to function buffPtrIncrementSafe is always 0 [constArgument]
    if (!buffPtrIncrementSafe(sizeof(eSupportedService) * (supported_service_list_length))) {
                                                        ^
framework/tlvf/AutoGenerated/src/tlvf/wfa_map/tlvTransmitPowerLimit.cpp:120:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if (m_parse__) {
        ^
framework/tlvf/src/src/ClassList.cpp:24:17: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
        msg_len += c->getLen();
                ^
framework/transport/ieee1905_transport/ieee1905_transport_local_bus.cpp:62:34: style: C-style pointer casting [cstyleCast]
        Ieee1905CmduHeader *ch = (Ieee1905CmduHeader *)packet.payload.iov_base;
                                 ^
framework/transport/ieee1905_transport/ieee1905_transport_local_bus.cpp:144:36: style: C-style pointer casting [cstyleCast]
        Ieee1905CmduHeader *ch   = (Ieee1905CmduHeader *)packet.payload.iov_base;
                                   ^
framework/transport/ieee1905_transport/ieee1905_transport_local_bus.cpp:43:73: style: Parameter 'msg' can be declared with const [constParameter]
void Ieee1905Transport::handle_local_bus_cmdu_tx_message(CmduTxMessage &msg)
                                                                        ^
framework/transport/ieee1905_transport/ieee1905_transport_local_bus.cpp:95:43: style: Parameter 'msg' can be declared with const [constParameter]
    InterfaceConfigurationRequestMessage &msg)
                                          ^
framework/tlvf/test/tlvf_test.cpp:654:22: style: The scope of the variable 'expected' can be reduced. [variableScope]
            uint16_t expected = 0x0bb0;
                     ^
framework/tlvf/test/tlvf_test.cpp:181:14: style: Local variable 'cmplx' shadows outer variable [shadowVariable]
        auto cmplx = std::get<1>(tlv4->complex_list(i));
             ^
framework/tlvf/test/tlvf_test.cpp:687:18: style: Local variable 'cmplx' shadows outer variable [shadowVariable]
            auto cmplx = std::get<1>(tlv4->complex_list(0));
                 ^
framework/tlvf/test/tlvf_test.cpp:719:18: style: Local variable 'cmplx' shadows outer variable [shadowVariable]
            auto cmplx = std::get<1>(tlv4->complex_list(1));
                 ^
framework/tlvf/test/tlvf_test.cpp:325:15: style: Variable 'tlv1' is assigned a value that is never used. [unreadVariable]
    auto tlv1 = msg.addClass<tlvNon1905neighborDeviceList>();
              ^
framework/tlvf/test/tlvf_test.cpp:326:15: style: Variable 'tlv2' is assigned a value that is never used. [unreadVariable]
    auto tlv2 = msg.addClass<tlvLinkMetricQuery>();
              ^
framework/tlvf/test/tlvf_test.cpp:327:15: style: Variable 'tlv3' is assigned a value that is never used. [unreadVariable]
    auto tlv3 = msg.addClass<tlvWsc>();
              ^
framework/transport/ieee1905_transport/ieee1905_transport_packet_processing.cpp:54:34: style: C-style pointer casting [cstyleCast]
        Ieee1905CmduHeader *ch = (Ieee1905CmduHeader *)packet.payload.iov_base;
                                 ^
framework/transport/ieee1905_transport/ieee1905_transport_packet_processing.cpp:169:30: style: C-style pointer casting [cstyleCast]
    Ieee1905CmduHeader *ch = (Ieee1905CmduHeader *)packet.payload.iov_base;
                             ^
framework/transport/ieee1905_transport/ieee1905_transport_packet_processing.cpp:443:42: style: C-style pointer casting [cstyleCast]
                Ieee1905CmduHeader *ch = (Ieee1905CmduHeader *)packet.payload.iov_base;
                                         ^
framework/transport/ieee1905_transport/ieee1905_transport_packet_processing.cpp:44:47: style: Parameter 'packet' can be declared with const [constParameter]
bool Ieee1905Transport::verify_packet(Packet &packet)
                                              ^
